<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2024, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2024.10.0)
for:
    qiime2 (version: 2024.10.1)
-->
<tool name="qiime2 tools export" id="qiime2_core__tools__export" version="2024.10.0+dist.h3d8a7e27" profile="22.05" license="BSD-3-Clause">
    <description>Export data from a QIIME 2 artifact</description>
    <xrefs>
        <xref type="bio.tools">qiime2</xref>
    </xrefs>
    <requirements>
        <container type="docker">quay.io/qiime2/amplicon:2024.10</container>
    </requirements>
    <command>q2galaxy run tools export '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="input" type="data" format="qza" label="input: The path to the artifact you want to export"/>
        <param name="type_peek" type="select" label="The type of your input qza is:" display="radio">
            <options>
                <filter type="data_meta" key="semantic_type" ref="input"/>
            </options>
        </param>
        <param name="fmt_peek" type="select" label="The current QIIME 2 format is:" display="radio">
            <options>
                <filter type="data_meta" key="format" ref="input"/>
            </options>
        </param>
        <conditional name="fmt_finder">
            <param name="type" type="select" label="To change the format, select the type indicated above:">
                <option value="None" selected="true">export as is (no conversion)</option>
                <option value="BLASTDB">BLASTDB</option>
                <option value="Bowtie2Index">Bowtie2Index</option>
                <option value="BrackenDB">BrackenDB</option>
                <option value="DeblurStats">DeblurStats</option>
                <option value="Dist1D__ob__Multi__comma__ Independent__cb__">Dist1D[Multi, Independent]</option>
                <option value="Dist1D__ob__Multi__comma__ Matched__cb__">Dist1D[Multi, Matched]</option>
                <option value="Dist1D__ob__NestedOrdered__comma__ Independent__cb__">Dist1D[NestedOrdered, Independent]</option>
                <option value="Dist1D__ob__NestedOrdered__comma__ Matched__cb__">Dist1D[NestedOrdered, Matched]</option>
                <option value="Dist1D__ob__NestedUnordered__comma__ Independent__cb__">Dist1D[NestedUnordered, Independent]</option>
                <option value="Dist1D__ob__NestedUnordered__comma__ Matched__cb__">Dist1D[NestedUnordered, Matched]</option>
                <option value="Dist1D__ob__Ordered__comma__ Independent__cb__">Dist1D[Ordered, Independent]</option>
                <option value="Dist1D__ob__Ordered__comma__ Matched__cb__">Dist1D[Ordered, Matched]</option>
                <option value="Dist1D__ob__Unordered__comma__ Independent__cb__">Dist1D[Unordered, Independent]</option>
                <option value="Dist1D__ob__Unordered__comma__ Matched__cb__">Dist1D[Unordered, Matched]</option>
                <option value="DistanceMatrix">DistanceMatrix</option>
                <option value="EMPPairedEndSequences">EMPPairedEndSequences</option>
                <option value="EMPSingleEndSequences">EMPSingleEndSequences</option>
                <option value="ErrorCorrectionDetails">ErrorCorrectionDetails</option>
                <option value="FeatureData__ob__AlignedProteinSequence__cb__">FeatureData[AlignedProteinSequence]</option>
                <option value="FeatureData__ob__AlignedRNASequence__cb__">FeatureData[AlignedRNASequence]</option>
                <option value="FeatureData__ob__AlignedSequence__cb__">FeatureData[AlignedSequence]</option>
                <option value="FeatureData__ob__AlignmentMap__cb__">FeatureData[AlignmentMap]</option>
                <option value="FeatureData__ob__BLAST6__cb__">FeatureData[BLAST6]</option>
                <option value="FeatureData__ob__Contig__cb__">FeatureData[Contig]</option>
                <option value="FeatureData__ob__DecontamScore__cb__">FeatureData[DecontamScore]</option>
                <option value="FeatureData__ob__DifferentialAbundance__cb__">FeatureData[DifferentialAbundance]</option>
                <option value="FeatureData__ob__Differential__cb__">FeatureData[Differential]</option>
                <option value="FeatureData__ob__Importance__cb__">FeatureData[Importance]</option>
                <option value="FeatureData__ob__Kraken2Output__cb__">FeatureData[Kraken2Output]</option>
                <option value="FeatureData__ob__Kraken2Report__cb__">FeatureData[Kraken2Report]</option>
                <option value="FeatureData__ob__MAG__cb__">FeatureData[MAG]</option>
                <option value="FeatureData__ob__PairedEndRNASequence__cb__">FeatureData[PairedEndRNASequence]</option>
                <option value="FeatureData__ob__PairedEndSequence__cb__">FeatureData[PairedEndSequence]</option>
                <option value="FeatureData__ob__ProteinSequence__cb__">FeatureData[ProteinSequence]</option>
                <option value="FeatureData__ob__RNASequence__cb__">FeatureData[RNASequence]</option>
                <option value="FeatureData__ob__SILVATaxidMap__cb__">FeatureData[SILVATaxidMap]</option>
                <option value="FeatureData__ob__SILVATaxonomy__cb__">FeatureData[SILVATaxonomy]</option>
                <option value="FeatureData__ob__SequenceCharacteristics__cb__">FeatureData[SequenceCharacteristics]</option>
                <option value="FeatureData__ob__Sequence__cb__">FeatureData[Sequence]</option>
                <option value="FeatureData__ob__SingleBowtie2Index__cb__">FeatureData[SingleBowtie2Index]</option>
                <option value="FeatureData__ob__Taxonomy__cb__">FeatureData[Taxonomy]</option>
                <option value="FeatureMap__ob__MAGtoContigs__cb__">FeatureMap[MAGtoContigs]</option>
                <option value="FeatureTable__ob__Balance__cb__">FeatureTable[Balance]</option>
                <option value="FeatureTable__ob__Composition__cb__">FeatureTable[Composition]</option>
                <option value="FeatureTable__ob__Design__cb__">FeatureTable[Design]</option>
                <option value="FeatureTable__ob__Frequency__cb__">FeatureTable[Frequency]</option>
                <option value="FeatureTable__ob__Normalized__cb__">FeatureTable[Normalized]</option>
                <option value="FeatureTable__ob__PercentileNormalized__cb__">FeatureTable[PercentileNormalized]</option>
                <option value="FeatureTable__ob__PresenceAbsence__cb__">FeatureTable[PresenceAbsence]</option>
                <option value="FeatureTable__ob__RelativeFrequency__cb__">FeatureTable[RelativeFrequency]</option>
                <option value="GenomeData__ob__DNASequence__cb__">GenomeData[DNASequence]</option>
                <option value="GenomeData__ob__Genes__cb__">GenomeData[Genes]</option>
                <option value="GenomeData__ob__Loci__cb__">GenomeData[Loci]</option>
                <option value="GenomeData__ob__NOG__cb__">GenomeData[NOG]</option>
                <option value="GenomeData__ob__Orthologs__cb__">GenomeData[Orthologs]</option>
                <option value="GenomeData__ob__Proteins__cb__">GenomeData[Proteins]</option>
                <option value="Hierarchy">Hierarchy</option>
                <option value="ImmutableMetadata">ImmutableMetadata</option>
                <option value="KaijuDB">KaijuDB</option>
                <option value="Kraken2DB">Kraken2DB</option>
                <option value="Kraken2DBReport">Kraken2DBReport</option>
                <option value="MultiplexedPairedEndBarcodeInSequence">MultiplexedPairedEndBarcodeInSequence</option>
                <option value="MultiplexedSingleEndBarcodeInSequence">MultiplexedSingleEndBarcodeInSequence</option>
                <option value="PCoAResults">PCoAResults</option>
                <option value="Phylogeny__ob__Rooted__cb__">Phylogeny[Rooted]</option>
                <option value="Phylogeny__ob__Unrooted__cb__">Phylogeny[Unrooted]</option>
                <option value="Placements">Placements</option>
                <option value="ProcrustesStatistics">ProcrustesStatistics</option>
                <option value="ProfileHMM__ob__MultipleDNA__cb__">ProfileHMM[MultipleDNA]</option>
                <option value="ProfileHMM__ob__MultipleProtein__cb__">ProfileHMM[MultipleProtein]</option>
                <option value="ProfileHMM__ob__MultipleRNA__cb__">ProfileHMM[MultipleRNA]</option>
                <option value="ProfileHMM__ob__PressedDNA__cb__">ProfileHMM[PressedDNA]</option>
                <option value="ProfileHMM__ob__PressedProtein__cb__">ProfileHMM[PressedProtein]</option>
                <option value="ProfileHMM__ob__PressedRNA__cb__">ProfileHMM[PressedRNA]</option>
                <option value="ProfileHMM__ob__SingleDNA__cb__">ProfileHMM[SingleDNA]</option>
                <option value="ProfileHMM__ob__SingleProtein__cb__">ProfileHMM[SingleProtein]</option>
                <option value="ProfileHMM__ob__SingleRNA__cb__">ProfileHMM[SingleRNA]</option>
                <option value="QualityFilterStats">QualityFilterStats</option>
                <option value="RawSequences">RawSequences</option>
                <option value="ReferenceDB__ob__Diamond__cb__">ReferenceDB[Diamond]</option>
                <option value="ReferenceDB__ob__EggnogProteinSequences__cb__">ReferenceDB[EggnogProteinSequences]</option>
                <option value="ReferenceDB__ob__Eggnog__cb__">ReferenceDB[Eggnog]</option>
                <option value="ReferenceDB__ob__NCBITaxonomy__cb__">ReferenceDB[NCBITaxonomy]</option>
                <option value="SampleData__ob__AlignmentMap__cb__">SampleData[AlignmentMap]</option>
                <option value="SampleData__ob__AlphaDiversity__cb__">SampleData[AlphaDiversity]</option>
                <option value="SampleData__ob__ArtificialGrouping__cb__">SampleData[ArtificialGrouping]</option>
                <option value="SampleData__ob__BooleanSeries__cb__">SampleData[BooleanSeries]</option>
                <option value="SampleData__ob__ClassifierPredictions__cb__">SampleData[ClassifierPredictions]</option>
                <option value="SampleData__ob__Contigs__cb__">SampleData[Contigs]</option>
                <option value="SampleData__ob__DADA2Stats__cb__">SampleData[DADA2Stats]</option>
                <option value="SampleData__ob__FirstDifferences__cb__">SampleData[FirstDifferences]</option>
                <option value="SampleData__ob__JoinedSequencesWithQuality__cb__">SampleData[JoinedSequencesWithQuality]</option>
                <option value="SampleData__ob__Kraken2Output__cb__">SampleData[Kraken2Output]</option>
                <option value="SampleData__ob__Kraken2Report__cb__">SampleData[Kraken2Report]</option>
                <option value="SampleData__ob__MAGs__cb__">SampleData[MAGs]</option>
                <option value="SampleData__ob__MultiAlignmentMap__cb__">SampleData[MultiAlignmentMap]</option>
                <option value="SampleData__ob__MultiBowtie2Index__cb__">SampleData[MultiBowtie2Index]</option>
                <option value="SampleData__ob__NOG__cb__">SampleData[NOG]</option>
                <option value="SampleData__ob__Orthologs__cb__">SampleData[Orthologs]</option>
                <option value="SampleData__ob__PairedEndSequencesWithQuality__cb__">SampleData[PairedEndSequencesWithQuality]</option>
                <option value="SampleData__ob__Probabilities__cb__">SampleData[Probabilities]</option>
                <option value="SampleData__ob__RegressorPredictions__cb__">SampleData[RegressorPredictions]</option>
                <option value="SampleData__ob__SequencesWithQuality__cb__">SampleData[SequencesWithQuality]</option>
                <option value="SampleData__ob__Sequences__cb__">SampleData[Sequences]</option>
                <option value="SampleData__ob__SingleBowtie2Index__cb__">SampleData[SingleBowtie2Index]</option>
                <option value="SampleData__ob__TrueTargets__cb__">SampleData[TrueTargets]</option>
                <option value="SampleEstimator__ob__Classifier__cb__">SampleEstimator[Classifier]</option>
                <option value="SampleEstimator__ob__Regressor__cb__">SampleEstimator[Regressor]</option>
                <option value="SeppReferenceDatabase">SeppReferenceDatabase</option>
                <option value="StatsTable__ob__Pairwise__cb__">StatsTable[Pairwise]</option>
                <option value="TaxonomicClassifier">TaxonomicClassifier</option>
                <option value="UchimeStats">UchimeStats</option>
            </param>
            <when value="None">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                </param>
            </when>
            <when value="BLASTDB">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BLASTDBDirFmtV5">BLASTDB Directory Format V5</option>
                </param>
            </when>
            <when value="Bowtie2Index">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Bowtie2IndexDirFmt">Bowtie2 Index Directory Format</option>
                </param>
            </when>
            <when value="BrackenDB">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BrackenDBDirectoryFormat">Bracken DB Directory Format</option>
                </param>
            </when>
            <when value="DeblurStats">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DeblurStatsFmt">Deblur Stats Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__Multi__comma__ Independent__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__Multi__comma__ Matched__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__NestedOrdered__comma__ Independent__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__NestedOrdered__comma__ Matched__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__NestedUnordered__comma__ Independent__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__NestedUnordered__comma__ Matched__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__Ordered__comma__ Independent__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__Ordered__comma__ Matched__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__Unordered__comma__ Independent__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="Dist1D__ob__Unordered__comma__ Matched__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="DistanceMatrix">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="LSMatFormat">LS Mat Format</option>
                </param>
            </when>
            <when value="EMPPairedEndSequences">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="EMPPairedEndDirFmt">EMP Paired End Directory Format</option>
                </param>
            </when>
            <when value="EMPSingleEndSequences">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="EMPSingleEndDirFmt">EMP Single End Directory Format</option>
                </param>
            </when>
            <when value="ErrorCorrectionDetails">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ErrorCorrectionDetailsFmt">Error Correction Details Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__AlignedProteinSequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="AlignedProteinFASTAFormat">Aligned Protein FASTA Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__AlignedRNASequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="AlignedRNAFASTAFormat">Aligned RNAFASTA Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__AlignedSequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="AlignedDNAFASTAFormat">Aligned DNAFASTA Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__AlignmentMap__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BAMDirFmt">BAM Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__BLAST6__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BLAST6Format">BLAST6 Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__Contig__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ContigSequencesDirFmt">Contig Sequences Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__DecontamScore__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DecontamScoreFormat">Decontam Score Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__DifferentialAbundance__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DataLoafPackageDirFmt">Data Loaf Package Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__Differential__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DifferentialFormat">Differential Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__Importance__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ImportanceFormat">Importance Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__Kraken2Output__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Kraken2OutputDirectoryFormat">Kraken2 Output Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__Kraken2Report__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Kraken2ReportDirectoryFormat">Kraken2 Report Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__MAG__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="MAGSequencesDirFmt">MAG Sequences Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__PairedEndRNASequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PairedRNASequencesDirectoryFormat">Paired RNA Sequences Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__PairedEndSequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PairedDNASequencesDirectoryFormat">Paired DNA Sequences Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__ProteinSequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ProteinFASTAFormat">Protein FASTA Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__RNASequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="RNAFASTAFormat">RNAFASTA Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__SILVATaxidMap__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SILVATaxidMapFormat">SILVA Taxid Map Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__SILVATaxonomy__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SILVATaxonomyFormat">SILVA Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__SequenceCharacteristics__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SequenceCharacteristicsFormat">Sequence Characteristics Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__Sequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__SingleBowtie2Index__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Bowtie2IndexDirFmt">Bowtie2 Index Directory Format</option>
                </param>
            </when>
            <when value="FeatureData__ob__Taxonomy__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureMap__ob__MAGtoContigs__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="MAGtoContigsFormat">MA Gto Contigs Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__Balance__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__Composition__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__Design__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__Frequency__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__Normalized__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__PercentileNormalized__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__PresenceAbsence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="FeatureTable__ob__RelativeFrequency__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BIOMV210Format">BIOMV210 Format</option>
                    <option value="DNAFASTAFormat">DNAFASTA Format</option>
                    <option value="TSVTaxonomyFormat">TSV Taxonomy Format</option>
                </param>
            </when>
            <when value="GenomeData__ob__DNASequence__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="GenomeSequencesDirectoryFormat">Genome Sequences Directory Format</option>
                </param>
            </when>
            <when value="GenomeData__ob__Genes__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="GenesDirectoryFormat">Genes Directory Format</option>
                </param>
            </when>
            <when value="GenomeData__ob__Loci__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="LociDirectoryFormat">Loci Directory Format</option>
                </param>
            </when>
            <when value="GenomeData__ob__NOG__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="OrthologAnnotationDirFmt">Ortholog Annotation Directory Format</option>
                </param>
            </when>
            <when value="GenomeData__ob__Orthologs__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SeedOrthologDirFmt">Seed Ortholog Directory Format</option>
                </param>
            </when>
            <when value="GenomeData__ob__Proteins__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ProteinsDirectoryFormat">Proteins Directory Format</option>
                </param>
            </when>
            <when value="Hierarchy">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="NewickFormat">Newick Format</option>
                </param>
            </when>
            <when value="ImmutableMetadata">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ImmutableMetadataFormat">Immutable Metadata Format</option>
                </param>
            </when>
            <when value="KaijuDB">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="KaijuDBDirectoryFormat">Kaiju DB Directory Format</option>
                </param>
            </when>
            <when value="Kraken2DB">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Kraken2DBDirectoryFormat">Kraken2DB Directory Format</option>
                </param>
            </when>
            <when value="Kraken2DBReport">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Kraken2DBReportFormat">Kraken2DB Report Format</option>
                </param>
            </when>
            <when value="MultiplexedPairedEndBarcodeInSequence">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="MultiplexedPairedEndBarcodeInSequenceDirFmt">Multiplexed Paired End Barcode In Sequence Directory Format</option>
                </param>
            </when>
            <when value="MultiplexedSingleEndBarcodeInSequence">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="FastqGzFormat">Fastq Gz Format</option>
                </param>
            </when>
            <when value="PCoAResults">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="OrdinationFormat">Ordination Format</option>
                </param>
            </when>
            <when value="Phylogeny__ob__Rooted__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="NewickFormat">Newick Format</option>
                </param>
            </when>
            <when value="Phylogeny__ob__Unrooted__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="NewickFormat">Newick Format</option>
                </param>
            </when>
            <when value="Placements">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PlacementsFormat">Placements Format</option>
                </param>
            </when>
            <when value="ProcrustesStatistics">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ProcrustesStatisticsFmt">Procrustes Statistics Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__MultipleDNA__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DNAMultipleProfileHmmDirectoryFmt">DNA Multiple Profile Hmm Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__MultipleProtein__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ProteinMultipleProfileHmmDirectoryFmt">Protein Multiple Profile Hmm Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__MultipleRNA__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="RNAMultipleProfileHmmDirectoryFmt">RNA Multiple Profile Hmm Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__PressedDNA__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PressedProfileHmmsDirectoryFmt">Pressed Profile Hmms Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__PressedProtein__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PressedProfileHmmsDirectoryFmt">Pressed Profile Hmms Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__PressedRNA__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PressedProfileHmmsDirectoryFmt">Pressed Profile Hmms Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__SingleDNA__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DNASingleProfileHmmDirectoryFmt">DNA Single Profile Hmm Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__SingleProtein__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ProteinSingleProfileHmmDirectoryFmt">Protein Single Profile Hmm Directory Format</option>
                </param>
            </when>
            <when value="ProfileHMM__ob__SingleRNA__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="RNASingleProfileHmmDirectoryFmt">RNA Single Profile Hmm Directory Format</option>
                </param>
            </when>
            <when value="QualityFilterStats">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="QualityFilterStatsFmt">Quality Filter Stats Format</option>
                </param>
            </when>
            <when value="RawSequences">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="EMPSingleEndDirFmt">EMP Single End Directory Format</option>
                </param>
            </when>
            <when value="ReferenceDB__ob__Diamond__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DiamondDatabaseFileFmt">Diamond Database File Format</option>
                </param>
            </when>
            <when value="ReferenceDB__ob__EggnogProteinSequences__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="EggnogProteinSequencesDirFmt">Eggnog Protein Sequences Directory Format</option>
                </param>
            </when>
            <when value="ReferenceDB__ob__Eggnog__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="EggnogRefDirFmt">Eggnog Ref Directory Format</option>
                </param>
            </when>
            <when value="ReferenceDB__ob__NCBITaxonomy__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="NCBITaxonomyDirFmt">NCBI Taxonomy Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__AlignmentMap__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BAMDirFmt">BAM Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__AlphaDiversity__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="AlphaDiversityFormat">Alpha Diversity Format</option>
                </param>
            </when>
            <when value="SampleData__ob__ArtificialGrouping__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ArtificialGroupingFormat">Artificial Grouping Format</option>
                </param>
            </when>
            <when value="SampleData__ob__BooleanSeries__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="BooleanSeriesFormat">Boolean Series Format</option>
                </param>
            </when>
            <when value="SampleData__ob__ClassifierPredictions__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PredictionsFormat">Predictions Format</option>
                </param>
            </when>
            <when value="SampleData__ob__Contigs__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ContigSequencesDirFmt">Contig Sequences Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__DADA2Stats__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="DADA2StatsFormat">DADA2 Stats Format</option>
                </param>
            </when>
            <when value="SampleData__ob__FirstDifferences__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="FirstDifferencesFormat">First Differences Format</option>
                </param>
            </when>
            <when value="SampleData__ob__JoinedSequencesWithQuality__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="CasavaOneEightSingleLanePerSampleDirFmt">Casava One Eight Single Lane Per Sample Directory Format</option>
                    <option value="QIIME1DemuxFormat">QIIME1 Demux Format</option>
                    <option value="SingleLanePerSampleSingleEndFastqDirFmt">Single Lane Per Sample Single End Fastq Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__Kraken2Output__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Kraken2OutputDirectoryFormat">Kraken2 Output Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__Kraken2Report__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Kraken2ReportDirectoryFormat">Kraken2 Report Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__MAGs__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="MultiFASTADirectoryFormat">Multi FASTA Directory Format</option>
                    <option value="MultiMAGSequencesDirFmt">Multi MAG Sequences Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__MultiAlignmentMap__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="MultiBAMDirFmt">Multi BAM Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__MultiBowtie2Index__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="MultiBowtie2IndexDirFmt">Multi Bowtie2 Index Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__NOG__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="OrthologAnnotationDirFmt">Ortholog Annotation Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__Orthologs__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SeedOrthologDirFmt">Seed Ortholog Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__PairedEndSequencesWithQuality__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="CasavaOneEightSingleLanePerSampleDirFmt">Casava One Eight Single Lane Per Sample Directory Format</option>
                    <option value="SingleLanePerSamplePairedEndFastqDirFmt">Single Lane Per Sample Paired End Fastq Directory Format</option>
                    <option value="SingleLanePerSampleSingleEndFastqDirFmt">Single Lane Per Sample Single End Fastq Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__Probabilities__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="ProbabilitiesFormat">Probabilities Format</option>
                </param>
            </when>
            <when value="SampleData__ob__RegressorPredictions__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PredictionsFormat">Predictions Format</option>
                </param>
            </when>
            <when value="SampleData__ob__SequencesWithQuality__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="CasavaOneEightSingleLanePerSampleDirFmt">Casava One Eight Single Lane Per Sample Directory Format</option>
                    <option value="QIIME1DemuxFormat">QIIME1 Demux Format</option>
                    <option value="SingleLanePerSampleSingleEndFastqDirFmt">Single Lane Per Sample Single End Fastq Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__Sequences__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="QIIME1DemuxFormat">QIIME1 Demux Format</option>
                </param>
            </when>
            <when value="SampleData__ob__SingleBowtie2Index__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="Bowtie2IndexDirFmt">Bowtie2 Index Directory Format</option>
                </param>
            </when>
            <when value="SampleData__ob__TrueTargets__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="PredictionsFormat">Predictions Format</option>
                </param>
            </when>
            <when value="SampleEstimator__ob__Classifier__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SampleEstimatorDirFmt">Sample Estimator Directory Format</option>
                </param>
            </when>
            <when value="SampleEstimator__ob__Regressor__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SampleEstimatorDirFmt">Sample Estimator Directory Format</option>
                </param>
            </when>
            <when value="SeppReferenceDatabase">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="SeppReferenceDirFmt">Sepp Reference Directory Format</option>
                </param>
            </when>
            <when value="StatsTable__ob__Pairwise__cb__">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TableJSONLFileFormat">Table JSONL File Format</option>
                </param>
            </when>
            <when value="TaxonomicClassifier">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="TaxonomicClassiferTemporaryPickleDirFmt">Taxonomic Classifer Temporary Pickle Directory Format</option>
                </param>
            </when>
            <when value="UchimeStats">
                <param name="output_format" type="select" label="QIIME 2 file format to convert to:">
                    <option value="None" selected="true">export as is (no conversion)</option>
                    <option value="UchimeStatsFmt">Uchime Stats Format</option>
                </param>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <collection name="exported" type="list" label="${tool.name} on ${on_string} as ${fmt_peek}">
            <filter>fmt_finder['output_format'] == 'None' and fmt_peek not in {'QIIME1DemuxFormat', 'TSVTaxonomyFormat', 'ProcrustesStatisticsDirFmt', 'CasavaOneEightSingleLanePerSampleDirFmt', 'UchimeStatsDirFmt', 'SILVATaxidMapFormat', 'NewickDirectoryFormat', 'AlignedDNAFASTAFormat', 'OrdinationDirectoryFormat', 'TableJSONLFileFormat', 'ProteinsDirectoryFormat', 'AlignedProteinSequencesDirectoryFormat', 'ArtificialGroupingDirectoryFormat', 'QualityFilterStatsFmt', 'ImmutableMetadataDirectoryFormat', 'DistanceMatrixDirectoryFormat', 'UchimeStatsFmt', 'ProteinSingleProfileHmmDirectoryFmt', 'DADA2StatsFormat', 'BIOMV210DirFmt', 'MultiFASTADirectoryFormat', 'AlignedDNASequencesDirectoryFormat', 'TableJSONLDirFmt', 'SequenceCharacteristicsFormat', 'BooleanSeriesFormat', 'MultiBAMDirFmt', 'GenomeSequencesDirectoryFormat', 'AlignedRNASequencesDirectoryFormat', 'MultiBowtie2IndexDirFmt', 'ImportanceFormat', 'FirstDifferencesDirectoryFormat', 'ArtificialGroupingFormat', 'MAGtoContigsFormat', 'MAGSequencesDirFmt', 'KaijuDBDirectoryFormat', 'DiamondDatabaseFileFmt', 'DataLoafPackageDirFmt', 'QIIME1DemuxDirFmt', 'DNASingleProfileHmmDirectoryFmt', 'Kraken2ReportDirectoryFormat', 'ErrorCorrectionDetailsDirFmt', 'ProbabilitiesDirectoryFormat', 'DecontamScoreDirFmt', 'DeblurStatsDirFmt', 'SILVATaxidMapDirectoryFormat', 'SingleLanePerSampleSingleEndFastqDirFmt', 'BLASTDBDirFmtV5', 'ErrorCorrectionDetailsFmt', 'LociDirectoryFormat', 'FastqGzFormat', 'ImmutableMetadataFormat', 'RNAFASTAFormat', 'EggnogRefDirFmt', 'DNAFASTAFormat', 'PlacementsDirFmt', 'ProteinMultipleProfileHmmDirectoryFmt', 'EMPSingleEndDirFmt', 'SILVATaxonomyDirectoryFormat', 'BLAST6Format', 'DNAMultipleProfileHmmDirectoryFmt', 'DADA2StatsDirFmt', 'SILVATaxonomyFormat', 'DNASequencesDirectoryFormat', 'PairedRNASequencesDirectoryFormat', 'SeedOrthologDirFmt', 'SequenceCharacteristicsDirectoryFormat', 'ProbabilitiesFormat', 'Kraken2DBReportDirectoryFormat', 'QualityFilterStatsDirFmt', 'SingleLanePerSamplePairedEndFastqDirFmt', 'DifferentialFormat', 'BAMDirFmt', 'NCBITaxonomyDirFmt', 'NewickFormat', 'LSMatFormat', 'MultiMAGSequencesDirFmt', 'RNASingleProfileHmmDirectoryFmt', 'Kraken2DBDirectoryFormat', 'AlignedRNAFASTAFormat', 'ProteinSequencesDirectoryFormat', 'Kraken2OutputDirectoryFormat', 'SampleEstimatorDirFmt', 'RNAMultipleProfileHmmDirectoryFmt', 'ProcrustesStatisticsFmt', 'BooleanSeriesDirectoryFormat', 'FirstDifferencesFormat', 'Bowtie2IndexDirFmt', 'PredictionsFormat', 'BLAST6DirectoryFormat', 'ImportanceDirectoryFormat', 'DifferentialDirectoryFormat', 'EMPPairedEndDirFmt', 'SeppReferenceDirFmt', 'TrueTargetsDirectoryFormat', 'OrdinationFormat', 'EggnogProteinSequencesDirFmt', 'OrthologAnnotationDirFmt', 'DecontamScoreFormat', 'DeblurStatsFmt', 'MultiplexedPairedEndBarcodeInSequenceDirFmt', 'MAGtoContigsDirFmt', 'Kraken2DBReportFormat', 'GenesDirectoryFormat', 'PredictionsDirectoryFormat', 'DiamondDatabaseDirFmt', 'TSVTaxonomyDirectoryFormat', 'ProteinFASTAFormat', 'BIOMV210Format', 'PairedDNASequencesDirectoryFormat', 'MultiplexedSingleEndBarcodeInSequenceDirFmt', 'AlphaDiversityDirectoryFormat', 'RNASequencesDirectoryFormat', 'AlignedProteinFASTAFormat', 'PlacementsFormat', 'AlphaDiversityFormat', 'TaxonomicClassiferTemporaryPickleDirFmt', 'ContigSequencesDirFmt', 'PressedProfileHmmsDirectoryFmt', 'BrackenDBDirectoryFormat'}</filter>
            <discover_datasets pattern="__designation_and_ext__" visible="false"/>
        </collection>
        <data name="AlignedDNAFASTAFormat" label="${tool.name} on ${on_string} as AlignedDNAFASTAFormat">
            <filter>fmt_finder['output_format'] == 'AlignedDNAFASTAFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlignedDNAFASTAFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="AlignedDNASequencesDirectoryFormat" label="${tool.name} on ${on_string} as AlignedDNASequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'AlignedDNASequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlignedDNASequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;aligned-dna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="AlignedProteinFASTAFormat" label="${tool.name} on ${on_string} as AlignedProteinFASTAFormat">
            <filter>fmt_finder['output_format'] == 'AlignedProteinFASTAFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlignedProteinFASTAFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="AlignedProteinSequencesDirectoryFormat" label="${tool.name} on ${on_string} as AlignedProteinSequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'AlignedProteinSequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlignedProteinSequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;aligned-protein-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="AlignedRNAFASTAFormat" label="${tool.name} on ${on_string} as AlignedRNAFASTAFormat">
            <filter>fmt_finder['output_format'] == 'AlignedRNAFASTAFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlignedRNAFASTAFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="AlignedRNASequencesDirectoryFormat" label="${tool.name} on ${on_string} as AlignedRNASequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'AlignedRNASequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlignedRNASequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;aligned-rna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="AlphaDiversityDirectoryFormat" label="${tool.name} on ${on_string} as AlphaDiversityDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'AlphaDiversityDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlphaDiversityDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;alpha-diversity)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="AlphaDiversityFormat" label="${tool.name} on ${on_string} as AlphaDiversityFormat">
            <filter>fmt_finder['output_format'] == 'AlphaDiversityFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'AlphaDiversityFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="ArtificialGroupingDirectoryFormat" label="${tool.name} on ${on_string} as ArtificialGroupingDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'ArtificialGroupingDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ArtificialGroupingDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;artificial-groupings)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="ArtificialGroupingFormat" label="${tool.name} on ${on_string} as ArtificialGroupingFormat">
            <filter>fmt_finder['output_format'] == 'ArtificialGroupingFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ArtificialGroupingFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <collection name="BAMDirFmt_bams" type="list" label="${tool.name} on ${on_string} as BAMDirFmt (bams)">
            <filter>fmt_finder['output_format'] == 'BAMDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BAMDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;bam)" visible="false"/>
        </collection>
        <data name="BIOMV210DirFmt" label="${tool.name} on ${on_string} as BIOMV210DirFmt">
            <filter>fmt_finder['output_format'] == 'BIOMV210DirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BIOMV210DirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;feature-table)\.(?P&lt;ext&gt;biom)" visible="true"/>
        </data>
        <data name="BIOMV210Format" label="${tool.name} on ${on_string} as BIOMV210Format">
            <filter>fmt_finder['output_format'] == 'BIOMV210Format' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BIOMV210Format')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="BLAST6DirectoryFormat" label="${tool.name} on ${on_string} as BLAST6DirectoryFormat">
            <filter>fmt_finder['output_format'] == 'BLAST6DirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BLAST6DirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;blast6)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="BLAST6Format" label="${tool.name} on ${on_string} as BLAST6Format">
            <filter>fmt_finder['output_format'] == 'BLAST6Format' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BLAST6Format')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="BLASTDBDirFmtV5" label="${tool.name} on ${on_string} as BLASTDBDirFmtV5">
            <filter>fmt_finder['output_format'] == 'BLASTDBDirFmtV5' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BLASTDBDirFmtV5')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;ndb)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;nhr)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;nin)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;not)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;nsq)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;ntf)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;nto)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;njs)" visible="true"/>
        </data>
        <data name="BooleanSeriesDirectoryFormat" label="${tool.name} on ${on_string} as BooleanSeriesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'BooleanSeriesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BooleanSeriesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;outliers)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="BooleanSeriesFormat" label="${tool.name} on ${on_string} as BooleanSeriesFormat">
            <filter>fmt_finder['output_format'] == 'BooleanSeriesFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BooleanSeriesFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="Bowtie2IndexDirFmt" label="${tool.name} on ${on_string} as Bowtie2IndexDirFmt">
            <filter>fmt_finder['output_format'] == 'Bowtie2IndexDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'Bowtie2IndexDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.+(?&lt;!\.rev)\.1)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+(?&lt;!\.rev)\.2)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.3)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.4)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.rev\.1)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.rev\.2)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
        </data>
        <collection name="BrackenDBDirectoryFormat_kmers" type="list" label="${tool.name} on ${on_string} as BrackenDBDirectoryFormat (kmers)">
            <filter>fmt_finder['output_format'] == 'BrackenDBDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'BrackenDBDirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;database(\d{2,})mers)\.(?P&lt;ext&gt;kmer_distrib$)" visible="false"/>
        </collection>
        <collection name="CasavaOneEightSingleLanePerSampleDirFmt_sequences" type="list" label="${tool.name} on ${on_string} as CasavaOneEightSingleLanePerSampleDirFmt (sequences)">
            <filter>fmt_finder['output_format'] == 'CasavaOneEightSingleLanePerSampleDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'CasavaOneEightSingleLanePerSampleDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+_.+_L[0-9][0-9][0-9]_R[12]_001)\.(?P&lt;ext&gt;fastq\.gz)" visible="false"/>
        </collection>
        <collection name="ContigSequencesDirFmt_sequences" type="list" label="${tool.name} on ${on_string} as ContigSequencesDirFmt (sequences)">
            <filter>fmt_finder['output_format'] == 'ContigSequencesDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ContigSequencesDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;[^)\.(?P&lt;ext&gt;].+_contigs.(fasta|fa)$)" visible="false"/>
        </collection>
        <data name="DADA2StatsDirFmt" label="${tool.name} on ${on_string} as DADA2StatsDirFmt">
            <filter>fmt_finder['output_format'] == 'DADA2StatsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DADA2StatsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;stats)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="DADA2StatsFormat" label="${tool.name} on ${on_string} as DADA2StatsFormat">
            <filter>fmt_finder['output_format'] == 'DADA2StatsFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DADA2StatsFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="DNAFASTAFormat" label="${tool.name} on ${on_string} as DNAFASTAFormat">
            <filter>fmt_finder['output_format'] == 'DNAFASTAFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DNAFASTAFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="DNAMultipleProfileHmmDirectoryFmt" label="${tool.name} on ${on_string} as DNAMultipleProfileHmmDirectoryFmt">
            <filter>fmt_finder['output_format'] == 'DNAMultipleProfileHmmDirectoryFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DNAMultipleProfileHmmDirectoryFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;hmm)" visible="true"/>
        </data>
        <data name="DNASequencesDirectoryFormat" label="${tool.name} on ${on_string} as DNASequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'DNASequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DNASequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;dna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="DNASingleProfileHmmDirectoryFmt" label="${tool.name} on ${on_string} as DNASingleProfileHmmDirectoryFmt">
            <filter>fmt_finder['output_format'] == 'DNASingleProfileHmmDirectoryFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DNASingleProfileHmmDirectoryFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;hmm)" visible="true"/>
        </data>
        <collection name="DataLoafPackageDirFmt_data_slices" type="list" label="${tool.name} on ${on_string} as DataLoafPackageDirFmt (data_slices)">
            <filter>fmt_finder['output_format'] == 'DataLoafPackageDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DataLoafPackageDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;csv)" visible="false"/>
        </collection>
        <data name="DataLoafPackageDirFmt" label="${tool.name} on ${on_string} as DataLoafPackageDirFmt">
            <filter>fmt_finder['output_format'] == 'DataLoafPackageDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DataLoafPackageDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;datapackage)\.(?P&lt;ext&gt;json)" visible="true"/>
        </data>
        <data name="DeblurStatsDirFmt" label="${tool.name} on ${on_string} as DeblurStatsDirFmt">
            <filter>fmt_finder['output_format'] == 'DeblurStatsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DeblurStatsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;stats)\.(?P&lt;ext&gt;csv)" visible="true"/>
        </data>
        <data name="DeblurStatsFmt" label="${tool.name} on ${on_string} as DeblurStatsFmt">
            <filter>fmt_finder['output_format'] == 'DeblurStatsFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DeblurStatsFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="DecontamScoreDirFmt" label="${tool.name} on ${on_string} as DecontamScoreDirFmt">
            <filter>fmt_finder['output_format'] == 'DecontamScoreDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DecontamScoreDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;stats)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="DecontamScoreFormat" label="${tool.name} on ${on_string} as DecontamScoreFormat">
            <filter>fmt_finder['output_format'] == 'DecontamScoreFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DecontamScoreFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="DiamondDatabaseDirFmt" label="${tool.name} on ${on_string} as DiamondDatabaseDirFmt">
            <filter>fmt_finder['output_format'] == 'DiamondDatabaseDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DiamondDatabaseDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;ref_db)\.(?P&lt;ext&gt;dmnd)" visible="true"/>
        </data>
        <data name="DiamondDatabaseFileFmt" label="${tool.name} on ${on_string} as DiamondDatabaseFileFmt">
            <filter>fmt_finder['output_format'] == 'DiamondDatabaseFileFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DiamondDatabaseFileFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="DifferentialDirectoryFormat" label="${tool.name} on ${on_string} as DifferentialDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'DifferentialDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DifferentialDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;differentials)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="DifferentialFormat" label="${tool.name} on ${on_string} as DifferentialFormat">
            <filter>fmt_finder['output_format'] == 'DifferentialFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DifferentialFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="DistanceMatrixDirectoryFormat" label="${tool.name} on ${on_string} as DistanceMatrixDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'DistanceMatrixDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'DistanceMatrixDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;distance-matrix)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="EMPPairedEndDirFmt" label="${tool.name} on ${on_string} as EMPPairedEndDirFmt">
            <filter>fmt_finder['output_format'] == 'EMPPairedEndDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'EMPPairedEndDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;forward)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;reverse)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;barcodes)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
        </data>
        <data name="EMPSingleEndDirFmt" label="${tool.name} on ${on_string} as EMPSingleEndDirFmt">
            <filter>fmt_finder['output_format'] == 'EMPSingleEndDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'EMPSingleEndDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;sequences)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;barcodes)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
        </data>
        <data name="EggnogProteinSequencesDirFmt" label="${tool.name} on ${on_string} as EggnogProteinSequencesDirFmt">
            <filter>fmt_finder['output_format'] == 'EggnogProteinSequencesDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'EggnogProteinSequencesDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;e5.taxid_info)\.(?P&lt;ext&gt;tsv)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;e5.proteomes)\.(?P&lt;ext&gt;faa)" visible="true"/>
        </data>
        <collection name="EggnogRefDirFmt_eggnog" type="list" label="${tool.name} on ${on_string} as EggnogRefDirFmt (eggnog)">
            <filter>fmt_finder['output_format'] == 'EggnogRefDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'EggnogRefDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;eggnog.*db)\.(?P&lt;ext&gt;*)" visible="false"/>
        </collection>
        <data name="ErrorCorrectionDetailsDirFmt" label="${tool.name} on ${on_string} as ErrorCorrectionDetailsDirFmt">
            <filter>fmt_finder['output_format'] == 'ErrorCorrectionDetailsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ErrorCorrectionDetailsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;details)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="ErrorCorrectionDetailsFmt" label="${tool.name} on ${on_string} as ErrorCorrectionDetailsFmt">
            <filter>fmt_finder['output_format'] == 'ErrorCorrectionDetailsFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ErrorCorrectionDetailsFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="FastqGzFormat" label="${tool.name} on ${on_string} as FastqGzFormat">
            <filter>fmt_finder['output_format'] == 'FastqGzFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'FastqGzFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="FirstDifferencesDirectoryFormat" label="${tool.name} on ${on_string} as FirstDifferencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'FirstDifferencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'FirstDifferencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;FirstDifferences)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="FirstDifferencesFormat" label="${tool.name} on ${on_string} as FirstDifferencesFormat">
            <filter>fmt_finder['output_format'] == 'FirstDifferencesFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'FirstDifferencesFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <collection name="GenesDirectoryFormat_genes" type="list" label="${tool.name} on ${on_string} as GenesDirectoryFormat (genes)">
            <filter>fmt_finder['output_format'] == 'GenesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'GenesDirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;(fa|fna|fasta)$)" visible="false"/>
        </collection>
        <collection name="GenomeSequencesDirectoryFormat_genomes" type="list" label="${tool.name} on ${on_string} as GenomeSequencesDirectoryFormat (genomes)">
            <filter>fmt_finder['output_format'] == 'GenomeSequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'GenomeSequencesDirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;(fasta|fa)$)" visible="false"/>
        </collection>
        <data name="ImmutableMetadataDirectoryFormat" label="${tool.name} on ${on_string} as ImmutableMetadataDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'ImmutableMetadataDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ImmutableMetadataDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;metadata)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="ImmutableMetadataFormat" label="${tool.name} on ${on_string} as ImmutableMetadataFormat">
            <filter>fmt_finder['output_format'] == 'ImmutableMetadataFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ImmutableMetadataFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="ImportanceDirectoryFormat" label="${tool.name} on ${on_string} as ImportanceDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'ImportanceDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ImportanceDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;importance)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="ImportanceFormat" label="${tool.name} on ${on_string} as ImportanceFormat">
            <filter>fmt_finder['output_format'] == 'ImportanceFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ImportanceFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="KaijuDBDirectoryFormat" label="${tool.name} on ${on_string} as KaijuDBDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'KaijuDBDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'KaijuDBDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;nodes)\.(?P&lt;ext&gt;dmp)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;names)\.(?P&lt;ext&gt;dmp)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;kaiju_db.+)\.(?P&lt;ext&gt;fmi)" visible="true"/>
        </data>
        <data name="Kraken2DBDirectoryFormat" label="${tool.name} on ${on_string} as Kraken2DBDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'Kraken2DBDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'Kraken2DBDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;hash)\.(?P&lt;ext&gt;k2d)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;opts)\.(?P&lt;ext&gt;k2d)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;taxo)\.(?P&lt;ext&gt;k2d)" visible="true"/>
        </data>
        <data name="Kraken2DBReportDirectoryFormat" label="${tool.name} on ${on_string} as Kraken2DBReportDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'Kraken2DBReportDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'Kraken2DBReportDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;report)\.(?P&lt;ext&gt;txt)" visible="true"/>
        </data>
        <data name="Kraken2DBReportFormat" label="${tool.name} on ${on_string} as Kraken2DBReportFormat">
            <filter>fmt_finder['output_format'] == 'Kraken2DBReportFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'Kraken2DBReportFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <collection name="Kraken2OutputDirectoryFormat_reports" type="list" label="${tool.name} on ${on_string} as Kraken2OutputDirectoryFormat (reports)">
            <filter>fmt_finder['output_format'] == 'Kraken2OutputDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'Kraken2OutputDirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+output)\.(?P&lt;ext&gt;(txt|tsv)$)" visible="false"/>
        </collection>
        <collection name="Kraken2ReportDirectoryFormat_reports" type="list" label="${tool.name} on ${on_string} as Kraken2ReportDirectoryFormat (reports)">
            <filter>fmt_finder['output_format'] == 'Kraken2ReportDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'Kraken2ReportDirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+report)\.(?P&lt;ext&gt;(txt|tsv)$)" visible="false"/>
        </collection>
        <data name="LSMatFormat" label="${tool.name} on ${on_string} as LSMatFormat">
            <filter>fmt_finder['output_format'] == 'LSMatFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'LSMatFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <collection name="LociDirectoryFormat_loci" type="list" label="${tool.name} on ${on_string} as LociDirectoryFormat (loci)">
            <filter>fmt_finder['output_format'] == 'LociDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'LociDirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;gff$)" visible="false"/>
        </collection>
        <collection name="MAGSequencesDirFmt_sequences" type="list" label="${tool.name} on ${on_string} as MAGSequencesDirFmt (sequences)">
            <filter>fmt_finder['output_format'] == 'MAGSequencesDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MAGSequencesDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})\.(?P&lt;ext&gt;(fa|fasta)$)" visible="false"/>
        </collection>
        <data name="MAGtoContigsDirFmt" label="${tool.name} on ${on_string} as MAGtoContigsDirFmt">
            <filter>fmt_finder['output_format'] == 'MAGtoContigsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MAGtoContigsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;mag-to-contigs)\.(?P&lt;ext&gt;json)" visible="true"/>
        </data>
        <data name="MAGtoContigsFormat" label="${tool.name} on ${on_string} as MAGtoContigsFormat">
            <filter>fmt_finder['output_format'] == 'MAGtoContigsFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MAGtoContigsFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <collection name="MultiBAMDirFmt_bams" type="list" label="${tool.name} on ${on_string} as MultiBAMDirFmt (bams)">
            <filter>fmt_finder['output_format'] == 'MultiBAMDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MultiBAMDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\/.+)\.(?P&lt;ext&gt;bam)" visible="false"/>
        </collection>
        <data name="MultiBowtie2IndexDirFmt" label="${tool.name} on ${on_string} as MultiBowtie2IndexDirFmt">
            <filter>fmt_finder['output_format'] == 'MultiBowtie2IndexDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MultiBowtie2IndexDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.+(?&lt;!\.rev)\.1)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+(?&lt;!\.rev)\.2)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.3)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.4)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.rev\.1)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.rev\.2)\.(?P&lt;ext&gt;bt2l?)" visible="true"/>
        </data>
        <collection name="MultiFASTADirectoryFormat_sequences" type="list" label="${tool.name} on ${on_string} as MultiFASTADirectoryFormat (sequences)">
            <filter>fmt_finder['output_format'] == 'MultiFASTADirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MultiFASTADirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;(fa|fasta)$)" visible="false"/>
        </collection>
        <collection name="MultiMAGSequencesDirFmt_sequences" type="list" label="${tool.name} on ${on_string} as MultiMAGSequencesDirFmt (sequences)">
            <filter>fmt_finder['output_format'] == 'MultiMAGSequencesDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MultiMAGSequencesDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;(fa|fasta)$)" visible="false"/>
        </collection>
        <data name="MultiMAGSequencesDirFmt" label="${tool.name} on ${on_string} as MultiMAGSequencesDirFmt">
            <filter>fmt_finder['output_format'] == 'MultiMAGSequencesDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MultiMAGSequencesDirFmt')</filter>
            <discover_datasets assign_primary_output="true" ext="txt" pattern="(?P&lt;designation&gt;MANIFEST)" visible="true"/>
        </data>
        <data name="MultiplexedPairedEndBarcodeInSequenceDirFmt" label="${tool.name} on ${on_string} as MultiplexedPairedEndBarcodeInSequenceDirFmt">
            <filter>fmt_finder['output_format'] == 'MultiplexedPairedEndBarcodeInSequenceDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MultiplexedPairedEndBarcodeInSequenceDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;forward)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;reverse)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
        </data>
        <data name="MultiplexedSingleEndBarcodeInSequenceDirFmt" label="${tool.name} on ${on_string} as MultiplexedSingleEndBarcodeInSequenceDirFmt">
            <filter>fmt_finder['output_format'] == 'MultiplexedSingleEndBarcodeInSequenceDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'MultiplexedSingleEndBarcodeInSequenceDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;forward)\.(?P&lt;ext&gt;fastq.gz)" visible="true"/>
        </data>
        <data name="NCBITaxonomyDirFmt" label="${tool.name} on ${on_string} as NCBITaxonomyDirFmt">
            <filter>fmt_finder['output_format'] == 'NCBITaxonomyDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'NCBITaxonomyDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;nodes)\.(?P&lt;ext&gt;dmp)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;names)\.(?P&lt;ext&gt;dmp)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;prot)\.(?P&lt;ext&gt;accession2taxid.gz)" visible="true"/>
        </data>
        <data name="NewickDirectoryFormat" label="${tool.name} on ${on_string} as NewickDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'NewickDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'NewickDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;tree)\.(?P&lt;ext&gt;nwk)" visible="true"/>
        </data>
        <data name="NewickFormat" label="${tool.name} on ${on_string} as NewickFormat">
            <filter>fmt_finder['output_format'] == 'NewickFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'NewickFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="OrdinationDirectoryFormat" label="${tool.name} on ${on_string} as OrdinationDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'OrdinationDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'OrdinationDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;ordination)\.(?P&lt;ext&gt;txt)" visible="true"/>
        </data>
        <data name="OrdinationFormat" label="${tool.name} on ${on_string} as OrdinationFormat">
            <filter>fmt_finder['output_format'] == 'OrdinationFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'OrdinationFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <collection name="OrthologAnnotationDirFmt_annotations" type="list" label="${tool.name} on ${on_string} as OrthologAnnotationDirFmt (annotations)">
            <filter>fmt_finder['output_format'] == 'OrthologAnnotationDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'OrthologAnnotationDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;annotations)" visible="false"/>
        </collection>
        <data name="PairedDNASequencesDirectoryFormat" label="${tool.name} on ${on_string} as PairedDNASequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'PairedDNASequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'PairedDNASequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;left-dna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;right-dna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="PairedRNASequencesDirectoryFormat" label="${tool.name} on ${on_string} as PairedRNASequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'PairedRNASequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'PairedRNASequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;left-rna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;right-rna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="PlacementsDirFmt" label="${tool.name} on ${on_string} as PlacementsDirFmt">
            <filter>fmt_finder['output_format'] == 'PlacementsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'PlacementsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;placements)\.(?P&lt;ext&gt;json)" visible="true"/>
        </data>
        <data name="PlacementsFormat" label="${tool.name} on ${on_string} as PlacementsFormat">
            <filter>fmt_finder['output_format'] == 'PlacementsFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'PlacementsFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="PredictionsDirectoryFormat" label="${tool.name} on ${on_string} as PredictionsDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'PredictionsDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'PredictionsDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;predictions)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="PredictionsFormat" label="${tool.name} on ${on_string} as PredictionsFormat">
            <filter>fmt_finder['output_format'] == 'PredictionsFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'PredictionsFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="PressedProfileHmmsDirectoryFmt" label="${tool.name} on ${on_string} as PressedProfileHmmsDirectoryFmt">
            <filter>fmt_finder['output_format'] == 'PressedProfileHmmsDirectoryFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'PressedProfileHmmsDirectoryFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.*\.hmm)\.(?P&lt;ext&gt;h3m)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.*\.hmm)\.(?P&lt;ext&gt;h3i)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.*\.hmm)\.(?P&lt;ext&gt;h3f)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;.*\.hmm)\.(?P&lt;ext&gt;h3p)" visible="true"/>
        </data>
        <data name="ProbabilitiesDirectoryFormat" label="${tool.name} on ${on_string} as ProbabilitiesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'ProbabilitiesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProbabilitiesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;class_probabilities)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="ProbabilitiesFormat" label="${tool.name} on ${on_string} as ProbabilitiesFormat">
            <filter>fmt_finder['output_format'] == 'ProbabilitiesFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProbabilitiesFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="ProcrustesStatisticsDirFmt" label="${tool.name} on ${on_string} as ProcrustesStatisticsDirFmt">
            <filter>fmt_finder['output_format'] == 'ProcrustesStatisticsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProcrustesStatisticsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;ProcrustesStatistics)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="ProcrustesStatisticsFmt" label="${tool.name} on ${on_string} as ProcrustesStatisticsFmt">
            <filter>fmt_finder['output_format'] == 'ProcrustesStatisticsFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProcrustesStatisticsFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="ProteinFASTAFormat" label="${tool.name} on ${on_string} as ProteinFASTAFormat">
            <filter>fmt_finder['output_format'] == 'ProteinFASTAFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProteinFASTAFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="ProteinMultipleProfileHmmDirectoryFmt" label="${tool.name} on ${on_string} as ProteinMultipleProfileHmmDirectoryFmt">
            <filter>fmt_finder['output_format'] == 'ProteinMultipleProfileHmmDirectoryFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProteinMultipleProfileHmmDirectoryFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;hmm)" visible="true"/>
        </data>
        <data name="ProteinSequencesDirectoryFormat" label="${tool.name} on ${on_string} as ProteinSequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'ProteinSequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProteinSequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;protein-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="ProteinSingleProfileHmmDirectoryFmt" label="${tool.name} on ${on_string} as ProteinSingleProfileHmmDirectoryFmt">
            <filter>fmt_finder['output_format'] == 'ProteinSingleProfileHmmDirectoryFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProteinSingleProfileHmmDirectoryFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;hmm)" visible="true"/>
        </data>
        <collection name="ProteinsDirectoryFormat_proteins" type="list" label="${tool.name} on ${on_string} as ProteinsDirectoryFormat (proteins)">
            <filter>fmt_finder['output_format'] == 'ProteinsDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'ProteinsDirectoryFormat')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.(?P&lt;ext&gt;(fa|faa|fasta)$)" visible="false"/>
        </collection>
        <data name="QIIME1DemuxDirFmt" label="${tool.name} on ${on_string} as QIIME1DemuxDirFmt">
            <filter>fmt_finder['output_format'] == 'QIIME1DemuxDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'QIIME1DemuxDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;seqs)\.(?P&lt;ext&gt;fna)" visible="true"/>
        </data>
        <data name="QIIME1DemuxFormat" label="${tool.name} on ${on_string} as QIIME1DemuxFormat">
            <filter>fmt_finder['output_format'] == 'QIIME1DemuxFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'QIIME1DemuxFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="QualityFilterStatsDirFmt" label="${tool.name} on ${on_string} as QualityFilterStatsDirFmt">
            <filter>fmt_finder['output_format'] == 'QualityFilterStatsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'QualityFilterStatsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;stats)\.(?P&lt;ext&gt;csv)" visible="true"/>
        </data>
        <data name="QualityFilterStatsFmt" label="${tool.name} on ${on_string} as QualityFilterStatsFmt">
            <filter>fmt_finder['output_format'] == 'QualityFilterStatsFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'QualityFilterStatsFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="RNAFASTAFormat" label="${tool.name} on ${on_string} as RNAFASTAFormat">
            <filter>fmt_finder['output_format'] == 'RNAFASTAFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'RNAFASTAFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="RNAMultipleProfileHmmDirectoryFmt" label="${tool.name} on ${on_string} as RNAMultipleProfileHmmDirectoryFmt">
            <filter>fmt_finder['output_format'] == 'RNAMultipleProfileHmmDirectoryFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'RNAMultipleProfileHmmDirectoryFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;hmm)" visible="true"/>
        </data>
        <data name="RNASequencesDirectoryFormat" label="${tool.name} on ${on_string} as RNASequencesDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'RNASequencesDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'RNASequencesDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;rna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
        </data>
        <data name="RNASingleProfileHmmDirectoryFmt" label="${tool.name} on ${on_string} as RNASingleProfileHmmDirectoryFmt">
            <filter>fmt_finder['output_format'] == 'RNASingleProfileHmmDirectoryFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'RNASingleProfileHmmDirectoryFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;.*)\.(?P&lt;ext&gt;hmm)" visible="true"/>
        </data>
        <data name="SILVATaxidMapDirectoryFormat" label="${tool.name} on ${on_string} as SILVATaxidMapDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'SILVATaxidMapDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SILVATaxidMapDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;silva_taxmap)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="SILVATaxidMapFormat" label="${tool.name} on ${on_string} as SILVATaxidMapFormat">
            <filter>fmt_finder['output_format'] == 'SILVATaxidMapFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SILVATaxidMapFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="SILVATaxonomyDirectoryFormat" label="${tool.name} on ${on_string} as SILVATaxonomyDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'SILVATaxonomyDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SILVATaxonomyDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;silva_taxonomy)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="SILVATaxonomyFormat" label="${tool.name} on ${on_string} as SILVATaxonomyFormat">
            <filter>fmt_finder['output_format'] == 'SILVATaxonomyFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SILVATaxonomyFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="SampleEstimatorDirFmt" label="${tool.name} on ${on_string} as SampleEstimatorDirFmt">
            <filter>fmt_finder['output_format'] == 'SampleEstimatorDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SampleEstimatorDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;sklearn_version)\.(?P&lt;ext&gt;json)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;sklearn_pipeline)\.(?P&lt;ext&gt;tar)" visible="true"/>
        </data>
        <collection name="SeedOrthologDirFmt_seed_orthologs" type="list" label="${tool.name} on ${on_string} as SeedOrthologDirFmt (seed_orthologs)">
            <filter>fmt_finder['output_format'] == 'SeedOrthologDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SeedOrthologDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.*\..*)\.(?P&lt;ext&gt;seed_orthologs)" visible="false"/>
        </collection>
        <data name="SeppReferenceDirFmt" label="${tool.name} on ${on_string} as SeppReferenceDirFmt">
            <filter>fmt_finder['output_format'] == 'SeppReferenceDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SeppReferenceDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;aligned-dna-sequences)\.(?P&lt;ext&gt;fasta)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;tree)\.(?P&lt;ext&gt;nwk)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;raxml-info)\.(?P&lt;ext&gt;txt)" visible="true"/>
        </data>
        <data name="SequenceCharacteristicsDirectoryFormat" label="${tool.name} on ${on_string} as SequenceCharacteristicsDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'SequenceCharacteristicsDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SequenceCharacteristicsDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;sequence_characteristics)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="SequenceCharacteristicsFormat" label="${tool.name} on ${on_string} as SequenceCharacteristicsFormat">
            <filter>fmt_finder['output_format'] == 'SequenceCharacteristicsFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SequenceCharacteristicsFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <collection name="SingleLanePerSamplePairedEndFastqDirFmt_sequences" type="list" label="${tool.name} on ${on_string} as SingleLanePerSamplePairedEndFastqDirFmt (sequences)">
            <filter>fmt_finder['output_format'] == 'SingleLanePerSamplePairedEndFastqDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SingleLanePerSamplePairedEndFastqDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+_.+_L[0-9][0-9][0-9]_R[12]_001)\.(?P&lt;ext&gt;fastq\.gz)" visible="false"/>
        </collection>
        <data name="SingleLanePerSamplePairedEndFastqDirFmt" label="${tool.name} on ${on_string} as SingleLanePerSamplePairedEndFastqDirFmt">
            <filter>fmt_finder['output_format'] == 'SingleLanePerSamplePairedEndFastqDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SingleLanePerSamplePairedEndFastqDirFmt')</filter>
            <discover_datasets assign_primary_output="true" ext="txt" pattern="(?P&lt;designation&gt;MANIFEST)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;metadata)\.(?P&lt;ext&gt;yml)" visible="true"/>
        </data>
        <collection name="SingleLanePerSampleSingleEndFastqDirFmt_sequences" type="list" label="${tool.name} on ${on_string} as SingleLanePerSampleSingleEndFastqDirFmt (sequences)">
            <filter>fmt_finder['output_format'] == 'SingleLanePerSampleSingleEndFastqDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SingleLanePerSampleSingleEndFastqDirFmt')</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+_.+_L[0-9][0-9][0-9]_R[12]_001)\.(?P&lt;ext&gt;fastq\.gz)" visible="false"/>
        </collection>
        <data name="SingleLanePerSampleSingleEndFastqDirFmt" label="${tool.name} on ${on_string} as SingleLanePerSampleSingleEndFastqDirFmt">
            <filter>fmt_finder['output_format'] == 'SingleLanePerSampleSingleEndFastqDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'SingleLanePerSampleSingleEndFastqDirFmt')</filter>
            <discover_datasets assign_primary_output="true" ext="txt" pattern="(?P&lt;designation&gt;MANIFEST)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;metadata)\.(?P&lt;ext&gt;yml)" visible="true"/>
        </data>
        <data name="TSVTaxonomyDirectoryFormat" label="${tool.name} on ${on_string} as TSVTaxonomyDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'TSVTaxonomyDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'TSVTaxonomyDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;taxonomy)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="TSVTaxonomyFormat" label="${tool.name} on ${on_string} as TSVTaxonomyFormat">
            <filter>fmt_finder['output_format'] == 'TSVTaxonomyFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'TSVTaxonomyFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="TableJSONLDirFmt" label="${tool.name} on ${on_string} as TableJSONLDirFmt">
            <filter>fmt_finder['output_format'] == 'TableJSONLDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'TableJSONLDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;data.table)\.(?P&lt;ext&gt;jsonl)" visible="true"/>
        </data>
        <data name="TableJSONLFileFormat" label="${tool.name} on ${on_string} as TableJSONLFileFormat">
            <filter>fmt_finder['output_format'] == 'TableJSONLFileFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'TableJSONLFileFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
        <data name="TaxonomicClassiferTemporaryPickleDirFmt" label="${tool.name} on ${on_string} as TaxonomicClassiferTemporaryPickleDirFmt">
            <filter>fmt_finder['output_format'] == 'TaxonomicClassiferTemporaryPickleDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'TaxonomicClassiferTemporaryPickleDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;sklearn_version)\.(?P&lt;ext&gt;json)" visible="true"/>
            <discover_datasets pattern="(?P&lt;designation&gt;sklearn_pipeline)\.(?P&lt;ext&gt;tar)" visible="true"/>
        </data>
        <data name="TrueTargetsDirectoryFormat" label="${tool.name} on ${on_string} as TrueTargetsDirectoryFormat">
            <filter>fmt_finder['output_format'] == 'TrueTargetsDirectoryFormat' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'TrueTargetsDirectoryFormat')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;true_targets)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="UchimeStatsDirFmt" label="${tool.name} on ${on_string} as UchimeStatsDirFmt">
            <filter>fmt_finder['output_format'] == 'UchimeStatsDirFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'UchimeStatsDirFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="(?P&lt;designation&gt;stats)\.(?P&lt;ext&gt;tsv)" visible="true"/>
        </data>
        <data name="UchimeStatsFmt" label="${tool.name} on ${on_string} as UchimeStatsFmt">
            <filter>fmt_finder['output_format'] == 'UchimeStatsFmt' or (fmt_finder['output_format'] == 'None' and fmt_peek == 'UchimeStatsFmt')</filter>
            <discover_datasets assign_primary_output="true" pattern="__designation_and_ext__" visible="true"/>
        </data>
    </outputs>
    <help>
QIIME 2: tools export
=====================
Export a QIIME 2 artifact to different formats

Instructions
------------

1. Select the QZA you would like to export. Once selected, two fields will
   update indicating the type and format of this QZA.

2. If you wish to change the output format, first provide the same type as
   the QZA (which is shown above). This will filter the avaiable formats.

3. Select the format you desire. Some limited documentation is available on
   these formats below.

**IMPORTANT:** if you select the wrong type when exporting, you will recieve an
error suggesting "No transformation from &lt;X&gt; to &lt;Y&gt;".

Formats:
--------
These formats have documentation available.

PressedProfileHmmsDirectoryFmt
******************************

The  &lt;hmmfile&gt;.h3m file contains the profile HMMs
and their annotation in a binary format. The &lt;hmmfile&gt;.h3i file is an
SSI index for the &lt;hmmfile&gt;.h3m file.  The &lt;hmmfile&gt;.h3f file contains
precomputed data structures for the fast heuristic filter
(the MSV filter).  The &lt;hmmfile&gt;.h3p file contains precomputed data
structures for the rest of each profile.

TSVTaxonomyFormat
*****************
Format for a 2+ column TSV file with an expected minimal header.

The only header recognized by this format is:

    Feature ID&lt;tab&gt;Taxon

Optionally followed by other arbitrary columns.

This format supports blank lines. The expected header must be the first
non-blank line. In addition to the header, there must be at least one line
of data.


QIIME1DemuxFormat
*****************
QIIME 1 demultiplexed FASTA format.

The QIIME 1 demultiplexed FASTA format is the default output format of
``split_libraries.py`` and ``split_libraries_fastq.py``. The file output by
QIIME 1 is named ``seqs.fna``; this filename is sometimes associated with
the file format itself due to its widespread usage in QIIME 1.

The format is documented here:
http://qiime.org/documentation/file_formats.html#demultiplexed-sequences

Format details:

- FASTA file with exactly two lines per record: header and sequence. Each
  sequence must span exactly one line and cannot be split across multiple
  lines.

- The ID in each header must follow the format ``&lt;sample-id&gt;_&lt;seq-id&gt;``.
  ``&lt;sample-id&gt;`` is the identifier of the sample the sequence belongs to,
  and ``&lt;seq-id&gt;`` is an identifier for the sequence *within* its sample.
  In QIIME 1, ``&lt;seq-id&gt;`` is typically an incrementing integer starting
  from zero, but any non-empty value can be used here, as long as the
  header IDs remain unique throughout the file. Note: ``&lt;sample-id&gt;`` may
  contain sample IDs that contain underscores; the rightmost underscore
  will used to delimit sample and sequence IDs.

- Descriptions in headers are permitted and ignored.

- Header IDs must be unique within the file.

- Each sequence must be DNA and cannot be empty.


SequenceCharacteristicsFormat
*****************************

Format for a TSV file with information about sequences like length of a
feature. The first column contains feature identifiers and is followed by
other optional columns.

The file cannot be empty and must have at least two columns.

Validation for additional columns can be added with a semantic validator
tied to a property. For example the "validate_seq_char_len" validator for
"FeatureData[SequenceCharacteristics % Properties("length")]"
adds validation for a numerical column called "length".

FastqGzFormat
*************

A gzipped fastq file.


Additional formats without documentation:
*****************************************
 - DifferentialFormat
 - DNASequencesDirectoryFormat
 - Kraken2OutputDirectoryFormat
 - MultiBAMDirFmt
 - FirstDifferencesFormat
 - AlignedDNAFASTAFormat
 - ProcrustesStatisticsDirFmt
 - EggnogProteinSequencesDirFmt
 - DifferentialDirectoryFormat
 - MAGSequencesDirFmt
 - ProteinSingleProfileHmmDirectoryFmt
 - ImportanceFormat
 - ImmutableMetadataFormat
 - ErrorCorrectionDetailsFmt
 - ArtificialGroupingFormat
 - OrthologAnnotationDirFmt
 - DecontamScoreFormat
 - FirstDifferencesDirectoryFormat
 - TrueTargetsDirectoryFormat
 - AlignedDNASequencesDirectoryFormat
 - QualityFilterStatsFmt
 - DeblurStatsFmt
 - BooleanSeriesDirectoryFormat
 - BIOMV210DirFmt
 - OrdinationFormat
 - LSMatFormat
 - ProteinMultipleProfileHmmDirectoryFmt
 - ImportanceDirectoryFormat
 - ImmutableMetadataDirectoryFormat
 - ErrorCorrectionDetailsDirFmt
 - SingleLanePerSamplePairedEndFastqDirFmt
 - Kraken2DBDirectoryFormat
 - OrdinationDirectoryFormat
 - BooleanSeriesFormat
 - BLASTDBDirFmtV5
 - DADA2StatsFormat
 - BLAST6Format
 - KaijuDBDirectoryFormat
 - ArtificialGroupingDirectoryFormat
 - MultiFASTADirectoryFormat
 - MAGtoContigsFormat
 - DNASingleProfileHmmDirectoryFmt
 - RNAFASTAFormat
 - ProbabilitiesFormat
 - SampleEstimatorDirFmt
 - MultiplexedPairedEndBarcodeInSequenceDirFmt
 - TableJSONLFileFormat
 - LociDirectoryFormat
 - QualityFilterStatsDirFmt
 - TSVTaxonomyDirectoryFormat
 - UchimeStatsFmt
 - ProcrustesStatisticsFmt
 - SILVATaxonomyDirectoryFormat
 - AlphaDiversityFormat
 - BLAST6DirectoryFormat
 - MultiMAGSequencesDirFmt
 - SeppReferenceDirFmt
 - DNAMultipleProfileHmmDirectoryFmt
 - RNASequencesDirectoryFormat
 - ProbabilitiesDirectoryFormat
 - PredictionsFormat
 - PlacementsFormat
 - NewickFormat
 - TableJSONLDirFmt
 - BrackenDBDirectoryFormat
 - ProteinSequencesDirectoryFormat
 - GenomeSequencesDirectoryFormat
 - MultiplexedSingleEndBarcodeInSequenceDirFmt
 - EggnogRefDirFmt
 - UchimeStatsDirFmt
 - AlignedRNAFASTAFormat
 - EMPSingleEndDirFmt
 - DADA2StatsDirFmt
 - TaxonomicClassiferTemporaryPickleDirFmt
 - AlphaDiversityDirectoryFormat
 - Kraken2ReportDirectoryFormat
 - MultiBowtie2IndexDirFmt
 - SILVATaxidMapFormat
 - CasavaOneEightSingleLanePerSampleDirFmt
 - RNASingleProfileHmmDirectoryFmt
 - PredictionsDirectoryFormat
 - DeblurStatsDirFmt
 - Bowtie2IndexDirFmt
 - SeedOrthologDirFmt
 - DiamondDatabaseFileFmt
 - ProteinFASTAFormat
 - AlignedRNASequencesDirectoryFormat
 - EMPPairedEndDirFmt
 - NewickDirectoryFormat
 - SequenceCharacteristicsDirectoryFormat
 - ContigSequencesDirFmt
 - Kraken2DBReportFormat
 - RNAMultipleProfileHmmDirectoryFmt
 - PlacementsDirFmt
 - DecontamScoreDirFmt
 - SILVATaxonomyFormat
 - DataLoafPackageDirFmt
 - SILVATaxidMapDirectoryFormat
 - DNAFASTAFormat
 - ProteinsDirectoryFormat
 - MAGtoContigsDirFmt
 - QIIME1DemuxDirFmt
 - DiamondDatabaseDirFmt
 - Kraken2DBReportDirectoryFormat
 - PairedDNASequencesDirectoryFormat
 - NCBITaxonomyDirFmt
 - DistanceMatrixDirectoryFormat
 - BIOMV210Format
 - AlignedProteinFASTAFormat
 - SingleLanePerSampleSingleEndFastqDirFmt
 - BAMDirFmt
 - PairedRNASequencesDirectoryFormat
 - AlignedProteinSequencesDirectoryFormat
 - GenesDirectoryFormat
</help>
    <citations>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
