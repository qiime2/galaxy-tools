<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2025, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2025.10.0)
for:
    qiime2 (version: 2025.10.0)
-->
<tool name="qiime2 kmerizer core-metrics" id="qiime2__kmerizer__core_metrics" version="2025.10.1+q2galaxy.2025.10.0" profile="22.05" license="BSD-3-Clause">
    <description>Kmer counting and core diversity metrics (non-phylogenetic)</description>
    <xrefs>
        <xref type="bio.tools">qiime2</xref>
    </xrefs>
    <requirements>
        <container type="docker">quay.io/qiime2/amplicon:2025.10</container>
    </requirements>
    <version_command>q2galaxy version kmerizer</version_command>
    <command detect_errors="exit_code">q2galaxy run kmerizer core_metrics '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="staging_path_and_source_path"/>
    </configfiles>
    <inputs>
        <param name="sequences" type="data" format="qza" label="sequences: FeatureData[Sequence | RNASequence | ProteinSequence]" help="[required]  Biological sequences to kmerize.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[ProteinSequence]"/>
                <filter type="add_value" value="FeatureData[Sequence]"/>
                <filter type="add_value" value="FeatureData[RNASequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[ProteinSequence]', 'FeatureData[RNASequence]', 'FeatureData[Sequence]']</validator>
        </param>
        <param name="table" type="data" format="qza" label="table: FeatureTable[Frequency]" help="[required]  Frequencies of sequences per sample.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureTable[Frequency]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureTable[Frequency]']</validator>
        </param>
        <param name="sampling_depth" type="integer" min="1" value="" label="sampling_depth: Int % Range(1, None)" help="[required]  The total frequency that each sample should be rarefied to prior to computing diversity metrics."/>
        <repeat name="metadata" min="1" help="[required]  The sample metadata to use in the emperor plots." title="metadata: Metadata">
            <conditional name="__q2galaxy__GUI__conditional__metadata__">
                <param name="type" type="select" label="metadata: Metadata">
                    <option value="tsv" selected="true">Metadata from TSV</option>
                    <option value="qza">Metadata from Artifact</option>
                </param>
                <when value="tsv">
                    <param name="source" type="data" format="tabular,qiime2.tabular" label="Metadata Source"/>
                </when>
                <when value="qza">
                    <param name="source" type="data" format="qza" label="Metadata Source"/>
                </when>
            </conditional>
        </repeat>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="kmer_size" type="integer" value="16" label="kmer_size: Int" help="[default: 16]  Length of kmers to generate."/>
            <param name="tfidf" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="tfidf: Bool" help="[default: No]  If True, kmers will be scored using TF-IDF and output frequencies will be weighted by scores. If False, kmers are counted without TF-IDF scores."/>
            <conditional name="__q2galaxy__GUI__conditional__max_df__">
                <param name="__q2galaxy__GUI__select__" type="select" label="max_df: Float % Range(0, 1, inclusive_end=True) | Int" help="[default: 1.0]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count.">
                    <option value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)" selected="true">Provide a value (Float % Range(0, 1, inclusive_end=True))</option>
                    <option value="__q2galaxy__::control::Int">Provide a value (Int)</option>
                </param>
                <when value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)">
                    <param name="max_df" type="float" min="0" max="1" value="1.0" label="max_df: Float % Range(0, 1, inclusive_end=True)" help="[default: 1.0]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
                <when value="__q2galaxy__::control::Int">
                    <param name="max_df" type="integer" value="" label="max_df: Int" help="[required]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__min_df__">
                <param name="__q2galaxy__GUI__select__" type="select" label="min_df: Float % Range(0, 1) | Int" help="[default: 1]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count.">
                    <option value="__q2galaxy__::control::Float X Range(0__comma__ 1)">Provide a value (Float % Range(0, 1))</option>
                    <option value="__q2galaxy__::control::Int" selected="true">Provide a value (Int)</option>
                </param>
                <when value="__q2galaxy__::control::Float X Range(0__comma__ 1)">
                    <param name="min_df" type="float" min="0" max="0.999999" value="" label="min_df: Float % Range(0, 1)" help="[required]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
                <when value="__q2galaxy__::control::Int">
                    <param name="min_df" type="integer" value="1" label="min_df: Int" help="[default: 1]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
            </conditional>
            <param name="max_features" type="integer" optional="true" label="max_features: Int" help="[optional]  If not None, build a vocabulary that only considers the top max_features ordered by frequency (or TF-IDF score)."/>
            <param name="with_replacement" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="with_replacement: Bool" help="[default: No]  Rarefy with replacement by sampling from the multinomial distribution instead of rarefying without replacement."/>
            <conditional name="__q2galaxy__GUI__conditional__n_jobs__">
                <param name="__q2galaxy__GUI__select__" type="select" label="n_jobs: Int % Range(1, None) | Str % Choices('auto')" help="[default: 1]  [beta methods only] - The number of concurrent jobs to use in performing this calculation. May not exceed the number of available physical cores. If n_jobs = 'auto', one job will be launched for each identified CPU core on the host.">
                    <option value="auto">auto (Str)</option>
                    <option value="__q2galaxy__::control::Int X Range(1__comma__ None)" selected="true">Provide a value (Int % Range(1, None))</option>
                </param>
                <when value="auto">
                    <param name="n_jobs" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Int X Range(1__comma__ None)">
                    <param name="n_jobs" type="integer" min="1" value="1" label="n_jobs: Int % Range(1, None)" help="[default: 1]  [beta methods only] - The number of concurrent jobs to use in performing this calculation. May not exceed the number of available physical cores. If n_jobs = 'auto', one job will be launched for each identified CPU core on the host."/>
                </when>
            </conditional>
            <param name="pc_dimensions" type="integer" value="3" label="pc_dimensions: Int" help="[default: 3]  Number of principal coordinate dimensions to keep for plotting."/>
            <conditional name="__q2galaxy__GUI__conditional__color_by__" label="color_by: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="color_by: Str" help="[optional]  Categorical measure from the input Metadata that should be used for color-coding the scatterplot.">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="color_by" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="color_by" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <param name="norm" type="select" label="norm: Str % Choices('None', 'l1', 'l2')" display="radio">
                <option value="None" selected="true">None</option>
                <option value="l1">l1</option>
                <option value="l2">l2</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="rarefied_table" format="qza" label="${tool.name} on ${on_string}: rarefied_table.qza" from_work_dir="rarefied_table.qza"/>
        <data name="kmer_table" format="qza" label="${tool.name} on ${on_string}: kmer_table.qza" from_work_dir="kmer_table.qza"/>
        <data name="observed_features_vector" format="qza" label="${tool.name} on ${on_string}: observed_features_vector.qza" from_work_dir="observed_features_vector.qza"/>
        <data name="shannon_vector" format="qza" label="${tool.name} on ${on_string}: shannon_vector.qza" from_work_dir="shannon_vector.qza"/>
        <data name="jaccard_distance_matrix" format="qza" label="${tool.name} on ${on_string}: jaccard_distance_matrix.qza" from_work_dir="jaccard_distance_matrix.qza"/>
        <data name="bray_curtis_distance_matrix" format="qza" label="${tool.name} on ${on_string}: bray_curtis_distance_matrix.qza" from_work_dir="bray_curtis_distance_matrix.qza"/>
        <data name="jaccard_pcoa_results" format="qza" label="${tool.name} on ${on_string}: jaccard_pcoa_results.qza" from_work_dir="jaccard_pcoa_results.qza"/>
        <data name="bray_curtis_pcoa_results" format="qza" label="${tool.name} on ${on_string}: bray_curtis_pcoa_results.qza" from_work_dir="bray_curtis_pcoa_results.qza"/>
        <data name="scatterplot" format="qzv" label="${tool.name} on ${on_string}: scatterplot.qzv" from_work_dir="scatterplot.qzv"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: kmerizer core-metrics
==============================
Kmer counting and core diversity metrics (non-phylogenetic)


Outputs:
--------
:rarefied_table.qza: The resulting rarefied feature table.
:kmer_table.qza: Frequencies of kmers per sample.
:observed_features_vector.qza: Vector of Observed Kmers values by sample.
:shannon_vector.qza: Vector of Shannon diversity values by sample.
:jaccard_distance_matrix.qza: Matrix of Jaccard distances between pairs of samples.
:bray_curtis_distance_matrix.qza: Matrix of Bray-Curtis dissimilarities between pairs of samples.
:jaccard_pcoa_results.qza: PCoA matrix computed from Jaccard distances between samples.
:bray_curtis_pcoa_results.qza: PCoA matrix computed from Bray-Curtis dissimilarities between samples.
:scatterplot.qzv: Scatterplot of results. Axes can be selected to display alpha diversity results or PCoA coordinates computed from Jaccard or Bray-Curtis.

|  

Description:
------------
Generate kmer counts from sequences and apply a collection of diversity metrics (non-phylogenetic) to compare samples.


|  

</help>
    <citations>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
