<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2025, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2025.10.0)
for:
    qiime2 (version: 2025.10.0)
-->
<tool name="qiime2 kmerizer seqs-to-kmers" id="qiime2__kmerizer__seqs_to_kmers" version="2025.10.1+q2galaxy.2025.10.0" profile="22.05" license="BSD-3-Clause">
    <description>Generate kmers from sequences.</description>
    <xrefs>
        <xref type="bio.tools">qiime2</xref>
    </xrefs>
    <requirements>
        <container type="docker">quay.io/qiime2/amplicon:2025.10</container>
    </requirements>
    <version_command>q2galaxy version kmerizer</version_command>
    <command detect_errors="exit_code">q2galaxy run kmerizer seqs_to_kmers '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="staging_path_and_source_path"/>
    </configfiles>
    <inputs>
        <param name="sequences" type="data" format="qza" label="sequences: FeatureData[Sequence | RNASequence | ProteinSequence]" help="[required]  Biological sequences to kmerize.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[ProteinSequence]"/>
                <filter type="add_value" value="FeatureData[Sequence]"/>
                <filter type="add_value" value="FeatureData[RNASequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[ProteinSequence]', 'FeatureData[RNASequence]', 'FeatureData[Sequence]']</validator>
        </param>
        <param name="table" type="data" format="qza" label="table: FeatureTable[Frequency]" help="[required]  Frequencies of sequences per sample.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureTable[Frequency]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureTable[Frequency]']</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="kmer_size" type="integer" value="16" label="kmer_size: Int" help="[default: 16]  Length of kmers to generate."/>
            <param name="tfidf" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="tfidf: Bool" help="[default: No]  If True, kmers will be scored using TF-IDF and output frequencies will be weighted by scores. If False, kmers are counted without TF-IDF scores."/>
            <conditional name="__q2galaxy__GUI__conditional__max_df__">
                <param name="__q2galaxy__GUI__select__" type="select" label="max_df: Float % Range(0, 1, inclusive_end=True) | Int" help="[default: 1.0]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count.">
                    <option value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)" selected="true">Provide a value (Float % Range(0, 1, inclusive_end=True))</option>
                    <option value="__q2galaxy__::control::Int">Provide a value (Int)</option>
                </param>
                <when value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)">
                    <param name="max_df" type="float" min="0" max="1" value="1.0" label="max_df: Float % Range(0, 1, inclusive_end=True)" help="[default: 1.0]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
                <when value="__q2galaxy__::control::Int">
                    <param name="max_df" type="integer" value="" label="max_df: Int" help="[required]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__min_df__">
                <param name="__q2galaxy__GUI__select__" type="select" label="min_df: Float % Range(0, 1) | Int" help="[default: 1]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count.">
                    <option value="__q2galaxy__::control::Float X Range(0__comma__ 1)">Provide a value (Float % Range(0, 1))</option>
                    <option value="__q2galaxy__::control::Int" selected="true">Provide a value (Int)</option>
                </param>
                <when value="__q2galaxy__::control::Float X Range(0__comma__ 1)">
                    <param name="min_df" type="float" min="0" max="0.999999" value="" label="min_df: Float % Range(0, 1)" help="[required]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
                <when value="__q2galaxy__::control::Int">
                    <param name="min_df" type="integer" value="1" label="min_df: Int" help="[default: 1]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
            </conditional>
            <param name="max_features" type="integer" optional="true" label="max_features: Int" help="[optional]  If not None, build a vocabulary that only considers the top max_features ordered by frequency (or TF-IDF score)."/>
            <param name="norm" type="select" label="norm: Str % Choices('None', 'l1', 'l2')" display="radio">
                <option value="None" selected="true">None</option>
                <option value="l1">l1</option>
                <option value="l2">l2</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="kmer_table" format="qza" label="${tool.name} on ${on_string}: kmer_table.qza" from_work_dir="kmer_table.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: kmerizer seqs-to-kmers
===============================
Generate kmers from sequences.


Outputs:
--------
:kmer_table.qza: Frequencies of kmers per sample.

|  

Description:
------------
Generate kmers from biological sequences.


|  

</help>
    <citations>
        <citation type="bibtex">@article{cite1,
 author = {Pedregosa, Fabian and Varoquaux, Gaël and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, Édouard},
 journal = {Journal of machine learning research},
 number = {Oct},
 pages = {2825--2830},
 title = {Scikit-learn: Machine learning in Python},
 volume = {12},
 year = {2011}
}
</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
