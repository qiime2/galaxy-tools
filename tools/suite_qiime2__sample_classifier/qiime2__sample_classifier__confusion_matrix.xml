<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2023, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2023.5.0)
for:
    qiime2 (version: 2023.5.1)
-->
<tool name="qiime2 sample-classifier confusion-matrix" id="qiime2__sample_classifier__confusion_matrix" version="2023.5.0+q2galaxy.2023.5.0.2" profile="22.05" license="BSD-3-Clause">
    <description>Make a confusion matrix from sample classifier predictions.</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2023.5</container>
    </requirements>
    <version_command>q2galaxy version sample_classifier</version_command>
    <command detect_errors="exit_code">q2galaxy run sample_classifier confusion_matrix '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="predictions" type="data" format="qza" label="predictions: SampleData[ClassifierPredictions]" help="[required]  Predicted values to plot on x axis. Should be predictions of categorical data produced by a sample classifier.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="SampleData[ClassifierPredictions]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['SampleData[ClassifierPredictions]']</validator>
        </param>
        <conditional name="truth">
            <param name="type" type="select" label="truth: MetadataColumn[Categorical]" help="[required]  Metadata column (true values) to plot on y axis.">
                <option value="tsv" selected="true">Metadata from TSV</option>
                <option value="qza">Metadata from Artifact</option>
            </param>
            <when value="tsv">
                <param name="source" type="data" format="tabular,qiime2.tabular" label="Metadata Source"/>
                <param name="column" type="data_column" label="Column Name" data_ref="source" use_header_names="true">
                    <validator type="expression" message="The first column cannot be selected (they are IDs).">value != "1"</validator>
                </param>
            </when>
            <when value="qza">
                <param name="source" type="data" format="qza" label="Metadata Source"/>
                <param name="column" type="text" label="Column Name">
                    <validator type="empty_field"/>
                </param>
            </when>
        </conditional>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="probabilities" type="data" format="qza" optional="true" label="probabilities: SampleData[Probabilities]" help="[optional]  Predicted class probabilities for each input sample.">
                <options options_filter_attribute="metadata.semantic_type">
                    <filter type="add_value" value="SampleData[Probabilities]"/>
                </options>
                <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['SampleData[Probabilities]']</validator>
            </param>
            <param name="missing_samples" type="select" label="missing_samples: Str % Choices('error', 'ignore')" display="radio">
                <option value="error" selected="true">error</option>
                <option value="ignore">ignore</option>
            </param>
            <conditional name="__q2galaxy__GUI__conditional__vmin__">
                <param name="__q2galaxy__GUI__select__" type="select" label="vmin: Float | Str % Choices('auto')" help="[default: 'auto']  The minimum value to use for anchoring the colormap. If &quot;auto&quot;, vmin is set to the minimum value in the data.">
                    <option value="auto" selected="true">auto (Str)</option>
                    <option value="__q2galaxy__::control::Float">Provide a value (Float)</option>
                </param>
                <when value="auto">
                    <param name="vmin" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Float">
                    <param name="vmin" type="float" value="" label="vmin: Float" help="[required]  The minimum value to use for anchoring the colormap. If &quot;auto&quot;, vmin is set to the minimum value in the data."/>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__vmax__">
                <param name="__q2galaxy__GUI__select__" type="select" label="vmax: Float | Str % Choices('auto')" help="[default: 'auto']  The maximum value to use for anchoring the colormap. If &quot;auto&quot;, vmax is set to the maximum value in the data.">
                    <option value="auto" selected="true">auto (Str)</option>
                    <option value="__q2galaxy__::control::Float">Provide a value (Float)</option>
                </param>
                <when value="auto">
                    <param name="vmax" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Float">
                    <param name="vmax" type="float" value="" label="vmax: Float" help="[required]  The maximum value to use for anchoring the colormap. If &quot;auto&quot;, vmax is set to the maximum value in the data."/>
                </when>
            </conditional>
            <param name="palette" type="select" label="palette: Str % Choices('YellowOrangeBrown', 'YellowOrangeRed', 'OrangeRed', 'PurpleRed', 'RedPurple', 'BluePurple', 'GreenBlue', 'PurpleBlue', 'YellowGreen', 'summer', 'copper', 'viridis', 'cividis', 'plasma', 'inferno', 'magma', 'sirocco', 'drifting', 'melancholy', 'enigma', 'eros', 'spectre', 'ambition', 'mysteriousstains', 'daydream', 'solano', 'navarro', 'dandelions', 'deepblue', 'verve', 'greyscale')">
                <option value="YellowOrangeBrown">YellowOrangeBrown</option>
                <option value="YellowOrangeRed">YellowOrangeRed</option>
                <option value="OrangeRed">OrangeRed</option>
                <option value="PurpleRed">PurpleRed</option>
                <option value="RedPurple">RedPurple</option>
                <option value="BluePurple">BluePurple</option>
                <option value="GreenBlue">GreenBlue</option>
                <option value="PurpleBlue">PurpleBlue</option>
                <option value="YellowGreen">YellowGreen</option>
                <option value="summer">summer</option>
                <option value="copper">copper</option>
                <option value="viridis">viridis</option>
                <option value="cividis">cividis</option>
                <option value="plasma">plasma</option>
                <option value="inferno">inferno</option>
                <option value="magma">magma</option>
                <option value="sirocco" selected="true">sirocco</option>
                <option value="drifting">drifting</option>
                <option value="melancholy">melancholy</option>
                <option value="enigma">enigma</option>
                <option value="eros">eros</option>
                <option value="spectre">spectre</option>
                <option value="ambition">ambition</option>
                <option value="mysteriousstains">mysteriousstains</option>
                <option value="daydream">daydream</option>
                <option value="solano">solano</option>
                <option value="navarro">navarro</option>
                <option value="dandelions">dandelions</option>
                <option value="deepblue">deepblue</option>
                <option value="verve">verve</option>
                <option value="greyscale">greyscale</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="visualization" format="qzv" label="${tool.name} on ${on_string}: visualization.qzv" from_work_dir="visualization.qzv"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: sample-classifier confusion-matrix
===========================================
Make a confusion matrix from sample classifier predictions.


Outputs:
--------
:visualization.qzv: &lt;no description&gt;

|  

Description:
------------
Make a confusion matrix and calculate accuracy of predicted vs. true values for a set of samples classified using a sample classifier. If per-sample class probabilities are provided, will also generate Receiver Operating Characteristic curves and calculate area under the curve for each class.


|  

</help>
    <citations>
        <citation type="doi">10.21105/joss.00934</citation>
        <citation type="bibtex">@article{cite2,
 author = {Pedregosa, Fabian and Varoquaux, Gaël and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, Édouard},
 journal = {Journal of machine learning research},
 number = {Oct},
 pages = {2825--2830},
 title = {Scikit-learn: Machine learning in Python},
 volume = {12},
 year = {2011}
}
</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
