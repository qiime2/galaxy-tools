<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2024, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2024.10.0)
for:
    qiime2 (version: 2024.10.1)
-->
<tool name="qiime2 quality-control decontam-identify-batches" id="qiime2__quality_control__decontam_identify_batches" version="2024.10.0+q2galaxy.2024.10.0" profile="22.05" license="BSD-3-Clause">
    <description>Identify contaminants in Batch Mode</description>
    <xrefs>
        <xref type="bio.tools">qiime2</xref>
    </xrefs>
    <requirements>
        <container type="docker">quay.io/qiime2/amplicon:2024.10</container>
    </requirements>
    <version_command>q2galaxy version quality_control</version_command>
    <command detect_errors="exit_code">q2galaxy run quality_control decontam_identify_batches '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="staging_path_and_source_path"/>
    </configfiles>
    <inputs>
        <param name="table" type="data" format="qza" label="table: FeatureTable[Frequency]" help="[required]  Feature table which contaminate sequences will be identified from">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureTable[Frequency]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureTable[Frequency]']</validator>
        </param>
        <repeat name="metadata" min="1" help="[required]  metadata file indicating which samples in the experiment are control samples, assumes sample names in file correspond to the `table` input parameter" title="metadata: Metadata">
            <conditional name="__q2galaxy__GUI__conditional__metadata__">
                <param name="type" type="select" label="metadata: Metadata">
                    <option value="tsv" selected="true">Metadata from TSV</option>
                    <option value="qza">Metadata from Artifact</option>
                </param>
                <when value="tsv">
                    <param name="source" type="data" format="tabular,qiime2.tabular" label="Metadata Source"/>
                </when>
                <when value="qza">
                    <param name="source" type="data" format="qza" label="Metadata Source"/>
                </when>
            </conditional>
        </repeat>
        <param name="split_column" type="text" label="split_column: Str" help="[required]  input metadata columns that you wish to subset the ASV table byNote: Column names must be in quotes and delimited by a space">
            <sanitizer>
                <valid initial="string.printable"/>
            </sanitizer>
            <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
        </param>
        <param name="method" type="select" label="method: Str % Choices('combined', 'frequency', 'prevalence')" display="radio">
            <option value="__q2galaxy__::literal::None">Selection required</option>
            <option value="combined">combined</option>
            <option value="frequency">frequency</option>
            <option value="prevalence">prevalence</option>
            <validator type="expression" message="Please verify this parameter.">value != '__q2galaxy__::literal::None'</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="rep_seqs" type="data" format="qza" optional="true" label="rep_seqs: FeatureData[Sequence]" help="[optional]  Representative Sequences table which contaminate seqeunces will be removed from">
                <options options_filter_attribute="metadata.semantic_type">
                    <filter type="add_value" value="FeatureData[Sequence]"/>
                </options>
                <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[Sequence]']</validator>
            </param>
            <param name="filter_empty_features" type="select" label="filter_empty_features: Bool" help="[optional]  If true, features which are not present in a split feature table are dropped." display="radio">
                <option value="__q2galaxy__::literal::None" selected="true">None (Use default behavior)</option>
                <option value="__q2galaxy__::literal::True">Yes</option>
                <option value="__q2galaxy__::literal::False">No</option>
            </param>
            <conditional name="__q2galaxy__GUI__conditional__freq_concentration_column__" label="freq_concentration_column: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="freq_concentration_column: Str" help="[optional]  Input column name that has concentration information for the samples">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="freq_concentration_column" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="freq_concentration_column" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__prev_control_column__" label="prev_control_column: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="prev_control_column: Str" help="[optional]  Input column name containing experimental or control sample metadata">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="prev_control_column" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="prev_control_column" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__prev_control_indicator__" label="prev_control_indicator: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="prev_control_indicator: Str" help="[optional]  indicate the control sample identifier (e.g. &quot;control&quot; or &quot;blank&quot;)">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="prev_control_indicator" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="prev_control_indicator" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <param name="threshold" type="float" value="0.1" label="threshold: Float" help="[default: 0.1]  Select threshold cutoff for decontam algorithm scores"/>
            <param name="weighted" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" checked="true" label="weighted: Bool" help="[default: Yes]  weight the decontam scores by their associated read number"/>
            <param name="bin_size" type="float" value="0.02" label="bin_size: Float" help="[default: 0.02]  Select bin size for the histogram"/>
        </section>
    </inputs>
    <outputs>
        <collection name="batch_subset_tables" type="list">
            <discover_datasets directory="batch_subset_tables" pattern="__name_and_ext__"/>
        </collection>
        <collection name="decontam_scores" type="list">
            <discover_datasets directory="decontam_scores" pattern="__name_and_ext__"/>
        </collection>
        <data name="score_histograms" format="qzv" label="${tool.name} on ${on_string}: score_histograms.qzv" from_work_dir="score_histograms.qzv"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: quality-control decontam-identify-batches
==================================================
Identify contaminants in Batch Mode


Outputs:
--------
:batch_subset_tables.qza: Directory where feature tables split based on metadata and parameter split_column values should be written.
:decontam_scores.qza: The resulting table of scores from the decontam algorithm which scores each feature on how likely they are to be a contaminant sequence
:score_histograms.qzv: The vizulaizer histograms for all decontam score objects generated from the pipeline

|  

Description:
------------
This method breaks an ASV table into batches based on the given metadata and identifies contaminant sequences from an OTU or ASV table and reports them to the user


|  

</help>
    <citations>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
