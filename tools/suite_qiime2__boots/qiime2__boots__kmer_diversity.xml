<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2025, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2025.10.0)
for:
    qiime2 (version: 2025.10.0)
-->
<tool name="qiime2 boots kmer-diversity" id="qiime2__boots__kmer_diversity" version="2025.10.0+q2galaxy.2025.10.0" profile="22.05" license="BSD-3-Clause">
    <description>Perform resampled "core metrics" analysis on kmerized features.</description>
    <xrefs>
        <xref type="bio.tools">qiime2</xref>
    </xrefs>
    <requirements>
        <container type="docker">quay.io/qiime2/amplicon:2025.10</container>
    </requirements>
    <version_command>q2galaxy version boots</version_command>
    <command detect_errors="exit_code">q2galaxy run boots kmer_diversity '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="staging_path_and_source_path"/>
    </configfiles>
    <inputs>
        <param name="table" type="data" format="qza" label="table: FeatureTable[Frequency | RelativeFrequency | PresenceAbsence]" help="[required]  The input feature table.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureTable[RelativeFrequency]"/>
                <filter type="add_value" value="FeatureTable[Frequency]"/>
                <filter type="add_value" value="FeatureTable[PresenceAbsence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureTable[Frequency]', 'FeatureTable[PresenceAbsence]', 'FeatureTable[RelativeFrequency]']</validator>
        </param>
        <param name="sequences" type="data" format="qza" label="sequences: FeatureData[Sequence | RNASequence | ProteinSequence]" help="[required]  Input sequences for kmerization.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Sequence]"/>
                <filter type="add_value" value="FeatureData[ProteinSequence]"/>
                <filter type="add_value" value="FeatureData[RNASequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[ProteinSequence]', 'FeatureData[RNASequence]', 'FeatureData[Sequence]']</validator>
        </param>
        <param name="sampling_depth" type="integer" min="1" value="" label="sampling_depth: Int % Range(1, None)" help="[required]  The total number of observations that each sample in `table` should be resampled to. Samples where the total number of observations in `table` is less than `sampling_depth` will be not be included in the output tables."/>
        <repeat name="metadata" min="1" help="[required]  The sample metadata used in generating Emperor plots." title="metadata: Metadata">
            <conditional name="__q2galaxy__GUI__conditional__metadata__">
                <param name="type" type="select" label="metadata: Metadata">
                    <option value="tsv" selected="true">Metadata from TSV</option>
                    <option value="qza">Metadata from Artifact</option>
                </param>
                <when value="tsv">
                    <param name="source" type="data" format="tabular,qiime2.tabular" label="Metadata Source"/>
                </when>
                <when value="qza">
                    <param name="source" type="data" format="qza" label="Metadata Source"/>
                </when>
            </conditional>
        </repeat>
        <param name="n" type="integer" min="1" value="" label="n: Int % Range(1, None)" help="[required]  The number of resampled tables that should be generated."/>
        <param name="replacement" type="select" label="replacement: Bool" help="[required]  Resample `table` with replacement (i.e., bootstrap) or without replacement (i.e., rarefaction)." display="radio">
            <option value="__q2galaxy__::literal::None">Selection required</option>
            <option value="__q2galaxy__::literal::True">Yes</option>
            <option value="__q2galaxy__::literal::False">No</option>
            <validator type="expression" message="Please verify this parameter.">value != '__q2galaxy__::literal::None'</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="kmer_size" type="integer" value="16" label="kmer_size: Int" help="[default: 16]  Length of kmers to generate."/>
            <param name="tfidf" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="tfidf: Bool" help="[default: No]  If True, kmers will be scored using TF-IDF and output frequencies will be weighted by scores. If False, kmers are counted without TF-IDF scores."/>
            <conditional name="__q2galaxy__GUI__conditional__max_df__">
                <param name="__q2galaxy__GUI__select__" type="select" label="max_df: Float % Range(0, 1, inclusive_end=True) | Int" help="[default: 1.0]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count.">
                    <option value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)" selected="true">Provide a value (Float % Range(0, 1, inclusive_end=True))</option>
                    <option value="__q2galaxy__::control::Int">Provide a value (Int)</option>
                </param>
                <when value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)">
                    <param name="max_df" type="float" min="0" max="1" value="1.0" label="max_df: Float % Range(0, 1, inclusive_end=True)" help="[default: 1.0]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
                <when value="__q2galaxy__::control::Int">
                    <param name="max_df" type="integer" value="" label="max_df: Int" help="[required]  Ignore kmers that have a frequency strictly higher than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__min_df__">
                <param name="__q2galaxy__GUI__select__" type="select" label="min_df: Float % Range(0, 1) | Int" help="[default: 1]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count.">
                    <option value="__q2galaxy__::control::Float X Range(0__comma__ 1)">Provide a value (Float % Range(0, 1))</option>
                    <option value="__q2galaxy__::control::Int" selected="true">Provide a value (Int)</option>
                </param>
                <when value="__q2galaxy__::control::Float X Range(0__comma__ 1)">
                    <param name="min_df" type="float" min="0" max="0.999999" value="" label="min_df: Float % Range(0, 1)" help="[required]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
                <when value="__q2galaxy__::control::Int">
                    <param name="min_df" type="integer" value="1" label="min_df: Int" help="[default: 1]  Ignore kmers that have a frequency strictly lower than the given threshold. If float, the parameter represents a proportion of sequences, if an integer it represents an absolute count."/>
                </when>
            </conditional>
            <param name="max_features" type="integer" optional="true" label="max_features: Int" help="[optional]  If not None, build a vocabulary that only considers the top max_features ordered by frequency (or TF-IDF score)."/>
            <param name="alpha_average_method" type="select" label="alpha_average_method: Str % Choices('mean', 'median')" display="radio">
                <option value="mean">mean</option>
                <option value="median" selected="true">median</option>
            </param>
            <param name="beta_average_method" type="select" label="beta_average_method: Str % Choices('non-metric-mean', 'non-metric-median', 'medoid')" display="radio">
                <option value="non-metric-mean">non-metric-mean</option>
                <option value="non-metric-median" selected="true">non-metric-median</option>
                <option value="medoid">medoid</option>
            </param>
            <param name="pc_dimensions" type="integer" value="3" label="pc_dimensions: Int" help="[default: 3]  Number of principal coordinate dimensions to present in the 2D scatterplot."/>
            <conditional name="__q2galaxy__GUI__conditional__color_by__" label="color_by: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="color_by: Str" help="[optional]  Categorical measure from the input Metadata that should be used for color-coding the 2D scatterplot.">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="color_by" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="color_by" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <param name="norm" type="select" label="norm: Str % Choices('None', 'l1', 'l2')" display="radio">
                <option value="None" selected="true">None</option>
                <option value="l1">l1</option>
                <option value="l2">l2</option>
            </param>
            <repeat name="alpha_metrics" help="[default: ['pielou_e', 'observed_features', 'shannon']]" title="alpha_metrics: List[Str % Choices('ace', 'berger_parker_d', 'brillouin_d', 'chao1', 'chao1_ci', 'dominance', 'doubles', 'enspie', 'esty_ci', 'fisher_alpha', 'gini_index', 'goods_coverage', 'heip_e', 'kempton_taylor_q', 'lladser_pe', 'margalef', 'mcintosh_d', 'mcintosh_e', 'menhinick', 'michaelis_menten_fit', 'observed_features', 'osd', 'pielou_e', 'robbins', 'shannon', 'simpson', 'simpson_e', 'singles', 'strong')]">
                <param name="element" type="select" label="element: Str % Choices('ace', 'berger_parker_d', 'brillouin_d', 'chao1', 'chao1_ci', 'dominance', 'doubles', 'enspie', 'esty_ci', 'fisher_alpha', 'gini_index', 'goods_coverage', 'heip_e', 'kempton_taylor_q', 'lladser_pe', 'margalef', 'mcintosh_d', 'mcintosh_e', 'menhinick', 'michaelis_menten_fit', 'observed_features', 'osd', 'pielou_e', 'robbins', 'shannon', 'simpson', 'simpson_e', 'singles', 'strong')">
                    <option value="__q2galaxy__::literal::None">Selection required</option>
                    <option value="ace">ace</option>
                    <option value="berger_parker_d">berger_parker_d</option>
                    <option value="brillouin_d">brillouin_d</option>
                    <option value="chao1">chao1</option>
                    <option value="chao1_ci">chao1_ci</option>
                    <option value="dominance">dominance</option>
                    <option value="doubles">doubles</option>
                    <option value="enspie">enspie</option>
                    <option value="esty_ci">esty_ci</option>
                    <option value="fisher_alpha">fisher_alpha</option>
                    <option value="gini_index">gini_index</option>
                    <option value="goods_coverage">goods_coverage</option>
                    <option value="heip_e">heip_e</option>
                    <option value="kempton_taylor_q">kempton_taylor_q</option>
                    <option value="lladser_pe">lladser_pe</option>
                    <option value="margalef">margalef</option>
                    <option value="mcintosh_d">mcintosh_d</option>
                    <option value="mcintosh_e">mcintosh_e</option>
                    <option value="menhinick">menhinick</option>
                    <option value="michaelis_menten_fit">michaelis_menten_fit</option>
                    <option value="observed_features">observed_features</option>
                    <option value="osd">osd</option>
                    <option value="pielou_e">pielou_e</option>
                    <option value="robbins">robbins</option>
                    <option value="shannon">shannon</option>
                    <option value="simpson">simpson</option>
                    <option value="simpson_e">simpson_e</option>
                    <option value="singles">singles</option>
                    <option value="strong">strong</option>
                    <validator type="expression" message="Please verify this parameter.">value != '__q2galaxy__::literal::None'</validator>
                </param>
            </repeat>
            <repeat name="beta_metrics" help="[default: ['braycurtis', 'jaccard']]" title="beta_metrics: List[Str % Choices('aitchison', 'braycurtis', 'canberra', 'canberra_adkins', 'chebyshev', 'cityblock', 'correlation', 'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'jensenshannon', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule')]">
                <param name="element" type="select" label="element: Str % Choices('aitchison', 'braycurtis', 'canberra', 'canberra_adkins', 'chebyshev', 'cityblock', 'correlation', 'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'jensenshannon', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule')">
                    <option value="__q2galaxy__::literal::None">Selection required</option>
                    <option value="aitchison">aitchison</option>
                    <option value="braycurtis">braycurtis</option>
                    <option value="canberra">canberra</option>
                    <option value="canberra_adkins">canberra_adkins</option>
                    <option value="chebyshev">chebyshev</option>
                    <option value="cityblock">cityblock</option>
                    <option value="correlation">correlation</option>
                    <option value="cosine">cosine</option>
                    <option value="dice">dice</option>
                    <option value="euclidean">euclidean</option>
                    <option value="hamming">hamming</option>
                    <option value="jaccard">jaccard</option>
                    <option value="jensenshannon">jensenshannon</option>
                    <option value="matching">matching</option>
                    <option value="minkowski">minkowski</option>
                    <option value="rogerstanimoto">rogerstanimoto</option>
                    <option value="russellrao">russellrao</option>
                    <option value="seuclidean">seuclidean</option>
                    <option value="sokalmichener">sokalmichener</option>
                    <option value="sokalsneath">sokalsneath</option>
                    <option value="sqeuclidean">sqeuclidean</option>
                    <option value="yule">yule</option>
                    <validator type="expression" message="Please verify this parameter.">value != '__q2galaxy__::literal::None'</validator>
                </param>
            </repeat>
        </section>
    </inputs>
    <outputs>
        <collection name="resampled_tables" type="list">
            <discover_datasets directory="resampled_tables" pattern="__name_and_ext__"/>
        </collection>
        <collection name="kmer_tables" type="list">
            <discover_datasets directory="kmer_tables" pattern="__name_and_ext__"/>
        </collection>
        <collection name="alpha_diversities" type="list">
            <discover_datasets directory="alpha_diversities" pattern="__name_and_ext__"/>
        </collection>
        <collection name="distance_matrices" type="list">
            <discover_datasets directory="distance_matrices" pattern="__name_and_ext__"/>
        </collection>
        <collection name="pcoas" type="list">
            <discover_datasets directory="pcoas" pattern="__name_and_ext__"/>
        </collection>
        <data name="scatter_plot" format="qzv" label="${tool.name} on ${on_string}: scatter_plot.qzv" from_work_dir="scatter_plot.qzv"/>
    </outputs>
    <tests>
        <test>
            <param name="table" value="kmer_diversity.test0.table.qza" ftype="qza"/>
            <param name="sequences" value="kmer_diversity.test0.sequences.qza" ftype="qza"/>
            <param name="sampling_depth" value="20"/>
            <repeat name="metadata">
                <conditional name="__q2galaxy__GUI__conditional__metadata__">
                    <param name="type" value="tsv"/>
                    <param name="source" value="kmer_diversity.test0.metadata.tsv" ftype="qiime2.tabular"/>
                </conditional>
            </repeat>
            <param name="n" value="10"/>
            <param name="replacement" value="__q2galaxy__::literal::True"/>
            <param name="kmer_size" value="5"/>
            <param name="alpha_average_method" value="median"/>
            <param name="beta_average_method" value="medoid"/>
            <output_collection name="resampled_tables" type="list"/>
            <output_collection name="kmer_tables" type="list"/>
            <output_collection name="alpha_diversities" type="list"/>
            <output_collection name="distance_matrices" type="list"/>
            <output_collection name="pcoas" type="list"/>
            <output name="scatter_plot" ftype="qzv"/>
        </test>
    </tests>
    <help>
QIIME 2: boots kmer-diversity
=============================
Perform resampled "core metrics" analysis on kmerized features.


Outputs:
--------
:resampled_tables.qza: The `n` resampled tables.
:kmer_tables.qza: The `n` kmer tables.
:alpha_diversities.qza: Average alpha diversity vector for each metric.
:distance_matrices.qza: Average beta diversity distance matrix for each metric.
:pcoas.qza: PCoA matrix for each beta diversity metric.
:scatter_plot.qzv: 2D scatter plot including alpha diversity and pcoa results for all selected metrics.

|  

Description:
------------
Given a single feature table as input, this action resamples the feature table `n` times to a total frequency of `sampling depth` per sample. It then splits all input sequences into kmers, and computes common alpha and beta diversity on each resulting kmer table. The resulting artifacts are then averaged using the method specified by `alpha_average_method` and `beta_average_method` parameters. The resulting average alpha and beta diversity artifacts are returned, along with a scatter plot integrated all alpha diversity metrics and the PCoA axes for all beta diversity metrics.

Examples:
---------

Bootstrapped kmer diversity
***************************
Using the ``qiime2 boots kmer-diversity`` tool:
 #. Set *"table"* to ``#: table.qza``
 #. Set *"sequences"* to ``#: sequences.qza``
 #. Set *"sampling_depth"* to ``20``
 #. For *"metadata"*:

    - Perform the following steps.

      #. Leave as ``Metadata from TSV``
      #. Set *"Metadata Source"* to ``metadata.tsv``


 #. Set *"n"* to ``10``
 #. Set *"replacement"* to ``Yes``
 #. Expand the ``additional options`` section

    #. Set *"kmer_size"* to ``5``
    #. Leave *"alpha_average_method"* as its default value of ``median``
    #. Set *"beta_average_method"* to ``medoid``

 #. Press the ``Execute`` button.

Once completed, for each new entry in your history, use the ``Edit`` button to set the name as follows:
 (Renaming is optional, but it will make any subsequent steps easier to complete.)

 .. list-table::
    :align: left
    :header-rows: 1

    * - History Name
      - *"Name"* to set (be sure to press ``Save``)
    * - ``#: qiime2 boots kmer-diversity [...] : resampled_tables.qza``
      - ``bootstrap-tables/``
    * - ``#: qiime2 boots kmer-diversity [...] : kmer_tables.qza``
      - ``kmer-tables/``
    * - ``#: qiime2 boots kmer-diversity [...] : alpha_diversities.qza``
      - ``bootstrap-alpha-diversities/``
    * - ``#: qiime2 boots kmer-diversity [...] : distance_matrices.qza``
      - ``bootstrap-distance-matrices/``
    * - ``#: qiime2 boots kmer-diversity [...] : pcoas.qza``
      - ``bootstrap-pcoas/``
    * - ``#: qiime2 boots kmer-diversity [...] : scatter_plot.qzv``
      - ``scatter-plot.qzv``


|  

</help>
    <citations>
        <citation type="bibtex">@article{cite1,
 abstract = {k-mer frequency information in biological sequences is used for a
wide range of applications, including taxonomy classification,
sequence similarity estimation, and supervised learning. However,
in spite of its widespread utility, k-mer counting has been
largely neglected for diversity estimation. This work examines
the application of k-mer counting for alpha and beta diversity as
well as supervised classification from microbiome marker-gene
sequencing data sets (16S rRNA gene and full-length fungal
internal transcribed spacer [ITS] sequences). Results demonstrate
a close correspondence with phylogenetically aware diversity
metrics, and advantages for using k-mer-based metrics for
measuring microbial biodiversity in microbiome sequencing
surveys. k-mer counting appears to be a suitable and efficient
strategy for feature processing prior to diversity estimation as
well as supervised learning in microbiome surveys. This allows
the incorporation of subsequence-level information into diversity
estimation without the computational cost of pairwise sequence
alignment. k-mer counting is proposed as a complementary approach
for feature processing prior to diversity estimation and
supervised learning analyses, enabling large-scale reference-free
profiling of microbiomes in biogeography, ecology, and biomedical
data. A method for k-mer counting from marker-gene sequence data
is implemented in the QIIME 2 plugin q2-kmerizer
(https://github.com/bokulich-lab/q2-kmerizer). IMPORTANCE: k-mers
are all of the subsequences of length k that comprise a sequence.
Comparing the frequency of k-mers in DNA sequences yields
valuable information about the composition of these sequences and
their similarity. This work demonstrates that k-mer frequencies
from marker-gene sequence surveys can be used to inform diversity
estimates and machine learning predictions that incorporate
sequence composition information. Alpha and beta diversity
estimates based on k-mer frequencies closely correspond to
phylogenetically aware diversity metrics, suggesting that
k-mer-based diversity estimates are useful proxy measurements
especially when reliable phylogenies are not available, as is
often the case for some DNA sequence targets such as for internal
transcribed spacer sequences.},
 author = {Bokulich, Nicholas A},
 journal = {mSystems},
 keywords = {alpha diversity; beta diversity; marker-gene sequencing;
microbiome; supervised learning},
 language = {en},
 month = {March},
 number = {3},
 pages = {e0155024},
 publisher = {American Society for Microbiology},
 title = {Integrating sequence composition information into microbial
diversity analyses with k-mer frequency counting},
 volume = {10},
 year = {2025}
}
</citation>
        <citation type="doi">https://doi.org/10.12688/f1000research.156295.1</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
