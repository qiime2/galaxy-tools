<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2023, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2023.5.0)
for:
    qiime2 (version: 2023.5.1)
-->
<tool name="qiime2 diversity beta" id="qiime2__diversity__beta" version="2023.5.1+q2galaxy.2023.5.0.2" profile="22.05" license="BSD-3-Clause">
    <description>Beta diversity</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2023.5</container>
    </requirements>
    <version_command>q2galaxy version diversity</version_command>
    <command detect_errors="exit_code">q2galaxy run diversity beta '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="table" type="data" format="qza" label="table: FeatureTable[Frequency | RelativeFrequency | PresenceAbsence]" help="[required]  The feature table containing the samples over which beta diversity should be computed.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureTable[RelativeFrequency]"/>
                <filter type="add_value" value="FeatureTable[PresenceAbsence]"/>
                <filter type="add_value" value="FeatureTable[Frequency]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureTable[Frequency]', 'FeatureTable[PresenceAbsence]', 'FeatureTable[RelativeFrequency]']</validator>
        </param>
        <param name="metric" type="select" label="metric: Str % Choices('aitchison', 'braycurtis', 'canberra', 'canberra_adkins', 'chebyshev', 'cityblock', 'correlation', 'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'jensenshannon', 'kulsinski', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule')">
            <option value="__q2galaxy__::literal::None">Selection required</option>
            <option value="aitchison">aitchison</option>
            <option value="braycurtis">braycurtis</option>
            <option value="canberra">canberra</option>
            <option value="canberra_adkins">canberra_adkins</option>
            <option value="chebyshev">chebyshev</option>
            <option value="cityblock">cityblock</option>
            <option value="correlation">correlation</option>
            <option value="cosine">cosine</option>
            <option value="dice">dice</option>
            <option value="euclidean">euclidean</option>
            <option value="hamming">hamming</option>
            <option value="jaccard">jaccard</option>
            <option value="jensenshannon">jensenshannon</option>
            <option value="kulsinski">kulsinski</option>
            <option value="matching">matching</option>
            <option value="minkowski">minkowski</option>
            <option value="rogerstanimoto">rogerstanimoto</option>
            <option value="russellrao">russellrao</option>
            <option value="seuclidean">seuclidean</option>
            <option value="sokalmichener">sokalmichener</option>
            <option value="sokalsneath">sokalsneath</option>
            <option value="sqeuclidean">sqeuclidean</option>
            <option value="yule">yule</option>
            <validator type="expression" message="Please verify this parameter.">value != '__q2galaxy__::literal::None'</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="pseudocount" type="integer" min="1" value="1" label="pseudocount: Int % Range(1, None)" help="[default: 1]  A pseudocount to handle zeros for compositional metrics.  This is ignored for other metrics."/>
            <conditional name="__q2galaxy__GUI__conditional__n_jobs__">
                <param name="__q2galaxy__GUI__select__" type="select" label="n_jobs: Int % Range(1, None) | Str % Choices('auto')" help="[default: 1]  The number of concurrent jobs to use in performing this calculation. May not exceed the number of available physical cores. If n_jobs = 'auto', one job will be launched for each identified CPU core on the host.">
                    <option value="auto">auto (Str)</option>
                    <option value="__q2galaxy__::control::Int X Range(1__comma__ None)" selected="true">Provide a value (Int % Range(1, None))</option>
                </param>
                <when value="auto">
                    <param name="n_jobs" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Int X Range(1__comma__ None)">
                    <param name="n_jobs" type="integer" min="1" value="1" label="n_jobs: Int % Range(1, None)" help="[default: 1]  The number of concurrent jobs to use in performing this calculation. May not exceed the number of available physical cores. If n_jobs = 'auto', one job will be launched for each identified CPU core on the host."/>
                </when>
            </conditional>
        </section>
    </inputs>
    <outputs>
        <data name="distance_matrix" format="qza" label="${tool.name} on ${on_string}: distance_matrix.qza" from_work_dir="distance_matrix.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: diversity beta
=======================
Beta diversity


Outputs:
--------
:distance_matrix.qza: The resulting distance matrix.

|  

Description:
------------
Computes a user-specified beta diversity metric for all pairs of samples in a feature table.


|  

</help>
    <citations>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
