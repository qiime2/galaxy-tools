<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2022, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2022.8.1)
for:
    qiime2 (version: 2022.8.1)
-->
<tool name="qiime2 feature-classifier extract-reads" id="qiime2__feature_classifier__extract_reads" version="2022.8.0+q2galaxy.2022.8.1.2" profile="22.05" license="BSD-3-Clause">
    <description>Extract reads from reference sequences.</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2022.8</container>
    </requirements>
    <version_command>q2galaxy version feature_classifier</version_command>
    <command detect_errors="aggressive">q2galaxy run feature_classifier extract_reads '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="sequences" type="data" format="qza" label="sequences: FeatureData[Sequence]" help="[required]">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Sequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[Sequence]']</validator>
        </param>
        <param name="f_primer" type="text" label="f_primer: Str" help="[required]  forward primer sequence (5' -&gt; 3').">
            <sanitizer>
                <valid initial="string.printable"/>
            </sanitizer>
            <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
        </param>
        <param name="r_primer" type="text" label="r_primer: Str" help="[required]  reverse primer sequence (5' -&gt; 3'). Do not use reverse-complemented primer sequence.">
            <sanitizer>
                <valid initial="string.printable"/>
            </sanitizer>
            <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="trim_right" type="integer" value="0" label="trim_right: Int" help="[default: 0]  trim_right nucleotides are removed from the 3' end if trim_right is positive. Applied before trunc_len and trim_left."/>
            <param name="trunc_len" type="integer" value="0" label="trunc_len: Int" help="[default: 0]  read is cut to trunc_len if trunc_len is positive. Applied after trim_right but before trim_left."/>
            <param name="trim_left" type="integer" value="0" label="trim_left: Int" help="[default: 0]  trim_left nucleotides are removed from the 5' end if trim_left is positive. Applied after trim_right and trunc_len."/>
            <param name="identity" type="float" value="0.8" label="identity: Float" help="[default: 0.8]  minimum combined primer match identity threshold."/>
            <param name="min_length" type="integer" min="0" value="50" label="min_length: Int % Range(0, None)" help="[default: 50]  Minimum amplicon length. Shorter amplicons are discarded. Applied after trimming and truncation, so be aware that trimming may impact sequence retention. Set to zero to disable min length filtering."/>
            <param name="max_length" type="integer" min="0" value="0" label="max_length: Int % Range(0, None)" help="[default: 0]  Maximum amplicon length. Longer amplicons are discarded. Applied before trimming and truncation, so plan accordingly. Set to zero (default) to disable max length filtering."/>
            <param name="n_jobs" type="integer" min="1" value="1" label="n_jobs: Int % Range(1, None)" help="[default: 1]  Number of seperate processes to run."/>
            <conditional name="__q2galaxy__GUI__conditional__batch_size__">
                <param name="__q2galaxy__GUI__select__" type="select" label="batch_size: Int % Range(1, None) | Str % Choices('auto')" help="[default: 'auto']  Number of sequences to process in a batch. The `auto` option is calculated from the number of sequences and number of jobs specified.">
                    <option value="auto" selected="true">auto (Str)</option>
                    <option value="__q2galaxy__::control::Int X Range(1__comma__ None)">Provide a value (Int % Range(1, None))</option>
                </param>
                <when value="auto">
                    <param name="batch_size" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Int X Range(1__comma__ None)">
                    <param name="batch_size" type="integer" min="1" value="" label="batch_size: Int % Range(1, None)" help="[required]  Number of sequences to process in a batch. The `auto` option is calculated from the number of sequences and number of jobs specified."/>
                </when>
            </conditional>
            <param name="read_orientation" type="select" label="read_orientation: Str % Choices('both', 'forward', 'reverse')" display="radio">
                <option value="both" selected="true">both</option>
                <option value="forward">forward</option>
                <option value="reverse">reverse</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="reads" format="qza" label="${tool.name} on ${on_string}: reads.qza" from_work_dir="reads.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: feature-classifier extract-reads
=========================================
Extract reads from reference sequences.


Outputs:
--------
:reads.qza: &lt;no description&gt;

|  

Description:
------------
Extract simulated amplicon reads from a reference database. Performs in-silico PCR to extract simulated amplicons from reference sequences that match the input primer sequences (within the mismatch threshold specified by `identity`). Both primer sequences must be in the 5' -&gt; 3' orientation. Sequences that fail to match both primers will be excluded. Reads are extracted, trimmed, and filtered in the following order: 1. reads are extracted in specified orientation; 2. primers are removed; 3. reads longer than `max_length` are removed; 4. reads are trimmed with `trim_right`; 5. reads are truncated to `trunc_len`; 6. reads are trimmed with `trim_left`; 7. reads shorter than `min_length` are removed.


|  

</help>
    <citations>
        <citation type="doi">10.1186/s40168-018-0470-z</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
