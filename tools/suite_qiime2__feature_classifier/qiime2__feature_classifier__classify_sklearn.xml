<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2022, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2022.8.1)
for:
    qiime2 (version: 2022.8.1)
-->
<tool name="qiime2 feature-classifier classify-sklearn" id="qiime2__feature_classifier__classify_sklearn" version="2022.8.0+q2galaxy.2022.8.1.1" profile="22.05" license="BSD-3-Clause">
    <description>Pre-fitted sklearn-based taxonomy classifier</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2022.8</container>
    </requirements>
    <version_command>q2galaxy version feature_classifier</version_command>
    <command detect_errors="aggressive">q2galaxy run feature_classifier classify_sklearn '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="reads" type="data" format="qza" label="reads: FeatureData[Sequence]" help="[required]  The feature data to be classified.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Sequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[Sequence]']</validator>
        </param>
        <param name="classifier" type="data" format="qza" label="classifier: TaxonomicClassifier" help="[required]  The taxonomic classifier for classifying the reads.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="TaxonomicClassifier"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['TaxonomicClassifier']</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <conditional name="__q2galaxy__GUI__conditional__reads_per_batch__">
                <param name="__q2galaxy__GUI__select__" type="select" label="reads_per_batch: Int % Range(1, None) | Str % Choices('auto')" help="[default: 'auto']  Number of reads to process in each batch. If &quot;auto&quot;, this parameter is autoscaled to min( number of query sequences / n_jobs, 20000).">
                    <option value="auto" selected="true">auto (Str)</option>
                    <option value="__q2galaxy__::control::Int X Range(1__comma__ None)">Provide a value (Int % Range(1, None))</option>
                </param>
                <when value="auto">
                    <param name="reads_per_batch" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Int X Range(1__comma__ None)">
                    <param name="reads_per_batch" type="integer" min="1" value="" label="reads_per_batch: Int % Range(1, None)" help="[required]  Number of reads to process in each batch. If &quot;auto&quot;, this parameter is autoscaled to min( number of query sequences / n_jobs, 20000)."/>
                </when>
            </conditional>
            <param name="n_jobs" type="integer" value="1" label="n_jobs: Int" help="[default: 1]  The maximum number of concurrently worker processes. If -1 all CPUs are used. If 1 is given, no parallel computing code is used at all, which is useful for debugging. For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for n_jobs = -2, all CPUs but one are used."/>
            <param name="pre_dispatch" type="text" value="2*n_jobs" label="pre_dispatch: Str" help="[default: '2*n_jobs']  &quot;all&quot; or expression, as in &quot;3*n_jobs&quot;. The number of batches (of tasks) to be pre-dispatched.">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <conditional name="__q2galaxy__GUI__conditional__confidence__">
                <param name="__q2galaxy__GUI__select__" type="select" label="confidence: Float % Range(0, 1, inclusive_end=True) | Str % Choices('disable')" help="[default: 0.7]  Confidence threshold for limiting taxonomic depth. Set to &quot;disable&quot; to disable confidence calculation, or 0 to calculate confidence but not apply it to limit the taxonomic depth of the assignments.">
                    <option value="disable">disable (Str)</option>
                    <option value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)" selected="true">Provide a value (Float % Range(0, 1, inclusive_end=True))</option>
                </param>
                <when value="disable">
                    <param name="confidence" type="hidden" value="disable"/>
                </when>
                <when value="__q2galaxy__::control::Float X Range(0__comma__ 1__comma__ inclusive_end=True)">
                    <param name="confidence" type="float" min="0" max="1" value="0.7" label="confidence: Float % Range(0, 1, inclusive_end=True)" help="[default: 0.7]  Confidence threshold for limiting taxonomic depth. Set to &quot;disable&quot; to disable confidence calculation, or 0 to calculate confidence but not apply it to limit the taxonomic depth of the assignments."/>
                </when>
            </conditional>
            <param name="read_orientation" type="select" label="read_orientation: Str % Choices('same', 'reverse-complement', 'auto')" display="radio">
                <option value="same">same</option>
                <option value="reverse-complement">reverse-complement</option>
                <option value="auto" selected="true">auto</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="classification" format="qza" label="${tool.id} on ${on_string}: classification.qza" from_work_dir="classification.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: feature-classifier classify-sklearn
============================================
Pre-fitted sklearn-based taxonomy classifier


Outputs:
--------
:classification.qza: &lt;no description&gt;

|  

Description:
------------
Classify reads by taxon using a fitted classifier.


|  

</help>
    <citations>
        <citation type="bibtex">@article{cite1,
 author = {Pedregosa, Fabian and Varoquaux, Gaël and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, Édouard},
 journal = {Journal of machine learning research},
 number = {Oct},
 pages = {2825--2830},
 title = {Scikit-learn: Machine learning in Python},
 volume = {12},
 year = {2011}
}
</citation>
        <citation type="doi">10.1186/s40168-018-0470-z</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
