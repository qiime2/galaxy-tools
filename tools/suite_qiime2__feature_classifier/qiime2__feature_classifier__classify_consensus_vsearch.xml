<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2022, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2022.8.1)
for:
    qiime2 (version: 2022.8.1)
-->
<tool name="qiime2 feature-classifier classify-consensus-vsearch" id="qiime2__feature_classifier__classify_consensus_vsearch" version="2022.8.0+q2galaxy.2022.8.1.2" profile="22.05" license="BSD-3-Clause">
    <description>VSEARCH-based consensus taxonomy classifier</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2022.8</container>
    </requirements>
    <version_command>q2galaxy version feature_classifier</version_command>
    <command detect_errors="aggressive">q2galaxy run feature_classifier classify_consensus_vsearch '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="query" type="data" format="qza" label="query: FeatureData[Sequence]" help="[required]  Query Sequences.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Sequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[Sequence]']</validator>
        </param>
        <param name="reference_reads" type="data" format="qza" label="reference_reads: FeatureData[Sequence]" help="[required]  Reference sequences.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Sequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[Sequence]']</validator>
        </param>
        <param name="reference_taxonomy" type="data" format="qza" label="reference_taxonomy: FeatureData[Taxonomy]" help="[required]  Reference taxonomy labels.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Taxonomy]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureData[Taxonomy]']</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <conditional name="__q2galaxy__GUI__conditional__maxaccepts__">
                <param name="__q2galaxy__GUI__select__" type="select" label="maxaccepts: Int % Range(1, None) | Str % Choices('all')" help="[default: 10]  Maximum number of hits to keep for each query. Set to &quot;all&quot; to keep all hits &gt; perc_identity similarity. Note that if strand=both, maxaccepts will keep N hits for each direction (if searches in the opposite direction yield results that exceed the minimum perc_identity). In those cases use maxhits to control the total number of hits returned. This option works in pair with maxrejects. The search process sorts target sequences by decreasing number of k-mers they have in common with the query sequence, using that information as a proxy for sequence similarity. After pairwise alignments, if the first target sequence passes the acceptation criteria, it is accepted as best hit and the search process stops for that query. If maxaccepts is set to a higher value, more hits are accepted. If maxaccepts and maxrejects are both set to &quot;all&quot;, the complete database is searched.">
                    <option value="all">all (Str)</option>
                    <option value="__q2galaxy__::control::Int X Range(1__comma__ None)" selected="true">Provide a value (Int % Range(1, None))</option>
                </param>
                <when value="all">
                    <param name="maxaccepts" type="hidden" value="all"/>
                </when>
                <when value="__q2galaxy__::control::Int X Range(1__comma__ None)">
                    <param name="maxaccepts" type="integer" min="1" value="10" label="maxaccepts: Int % Range(1, None)" help="[default: 10]  Maximum number of hits to keep for each query. Set to &quot;all&quot; to keep all hits &gt; perc_identity similarity. Note that if strand=both, maxaccepts will keep N hits for each direction (if searches in the opposite direction yield results that exceed the minimum perc_identity). In those cases use maxhits to control the total number of hits returned. This option works in pair with maxrejects. The search process sorts target sequences by decreasing number of k-mers they have in common with the query sequence, using that information as a proxy for sequence similarity. After pairwise alignments, if the first target sequence passes the acceptation criteria, it is accepted as best hit and the search process stops for that query. If maxaccepts is set to a higher value, more hits are accepted. If maxaccepts and maxrejects are both set to &quot;all&quot;, the complete database is searched."/>
                </when>
            </conditional>
            <param name="perc_identity" type="float" min="0.0" max="1.0" value="0.8" label="perc_identity: Float % Range(0.0, 1.0, inclusive_end=True)" help="[default: 0.8]  Reject match if percent identity to query is lower."/>
            <param name="query_cov" type="float" min="0.0" max="1.0" value="0.8" label="query_cov: Float % Range(0.0, 1.0, inclusive_end=True)" help="[default: 0.8]  Reject match if query alignment coverage per high-scoring pair is lower."/>
            <param name="strand" type="select" label="strand: Str % Choices('both', 'plus')" display="radio">
                <option value="both" selected="true">both</option>
                <option value="plus">plus</option>
            </param>
            <param name="search_exact" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="search_exact: Bool" help="[default: No]  Search for exact full-length matches to the query sequences. Only 100% exact matches are reported and this command is much faster than the default. If True, the perc_identity, query_cov, maxaccepts, and maxrejects settings are ignored. Note: query and reference reads must be trimmed to the exact same DNA locus (e.g., primer site) because only exact matches will be reported."/>
            <param name="top_hits_only" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="top_hits_only: Bool" help="[default: No]  Only the top hits between the query and reference sequence sets are reported. For each query, the top hit is the one presenting the highest percentage of identity. Multiple equally scored top hits will be used for consensus taxonomic assignment if maxaccepts is greater than 1."/>
            <conditional name="__q2galaxy__GUI__conditional__maxhits__">
                <param name="__q2galaxy__GUI__select__" type="select" label="maxhits: Int % Range(1, None) | Str % Choices('all')" help="[default: 'all']  Maximum number of hits to show once the search is terminated.">
                    <option value="all" selected="true">all (Str)</option>
                    <option value="__q2galaxy__::control::Int X Range(1__comma__ None)">Provide a value (Int % Range(1, None))</option>
                </param>
                <when value="all">
                    <param name="maxhits" type="hidden" value="all"/>
                </when>
                <when value="__q2galaxy__::control::Int X Range(1__comma__ None)">
                    <param name="maxhits" type="integer" min="1" value="" label="maxhits: Int % Range(1, None)" help="[required]  Maximum number of hits to show once the search is terminated."/>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__maxrejects__">
                <param name="__q2galaxy__GUI__select__" type="select" label="maxrejects: Int % Range(1, None) | Str % Choices('all')" help="[default: 'all']  Maximum number of non-matching target sequences to consider before stopping the search. This option works in pair with maxaccepts (see maxaccepts description for details).">
                    <option value="all" selected="true">all (Str)</option>
                    <option value="__q2galaxy__::control::Int X Range(1__comma__ None)">Provide a value (Int % Range(1, None))</option>
                </param>
                <when value="all">
                    <param name="maxrejects" type="hidden" value="all"/>
                </when>
                <when value="__q2galaxy__::control::Int X Range(1__comma__ None)">
                    <param name="maxrejects" type="integer" min="1" value="" label="maxrejects: Int % Range(1, None)" help="[required]  Maximum number of non-matching target sequences to consider before stopping the search. This option works in pair with maxaccepts (see maxaccepts description for details)."/>
                </when>
            </conditional>
            <param name="output_no_hits" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" checked="true" label="output_no_hits: Bool" help="[default: Yes]  Report both matching and non-matching queries. WARNING: always use the default setting for this option unless if you know what you are doing! If you set this option to False, your sequences and feature table will need to be filtered to exclude unclassified sequences, otherwise you may run into errors downstream from missing feature IDs."/>
            <param name="weak_id" type="float" min="0.0" max="1.0" value="0.0" label="weak_id: Float % Range(0.0, 1.0, inclusive_end=True)" help="[default: 0.0]  Show hits with percentage of identity of at least N, without terminating the search. A normal search stops as soon as enough hits are found (as defined by maxaccepts, maxrejects, and perc_identity). As weak_id reports weak hits that are not deduced from maxaccepts, high perc_identity values can be used, hence preserving both speed and sensitivity. Logically, weak_id must be smaller than the value indicated by perc_identity, otherwise this option will be ignored."/>
            <param name="threads" type="integer" min="1" value="1" label="threads: Int % Range(1, None)" help="[default: 1]  Number of threads to use for job parallelization."/>
            <param name="min_consensus" type="float" min="0.500001" max="1.0" value="0.51" label="min_consensus: Float % Range(0.5, 1.0, inclusive_start=False, inclusive_end=True)" help="[default: 0.51]  Minimum fraction of assignments must match top hit to be accepted as consensus assignment."/>
            <param name="unassignable_label" type="text" value="Unassigned" label="unassignable_label: Str" help="[default: 'Unassigned']  Annotation given to sequences without any hits.">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="classification" format="qza" label="${tool.name} on ${on_string}: classification.qza" from_work_dir="classification.qza"/>
        <data name="search_results" format="qza" label="${tool.name} on ${on_string}: search_results.qza" from_work_dir="search_results.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: feature-classifier classify-consensus-vsearch
======================================================
VSEARCH-based consensus taxonomy classifier


Outputs:
--------
:classification.qza: Taxonomy classifications of query sequences.
:search_results.qza: Top hits for each query.

|  

Description:
------------
Assign taxonomy to query sequences using VSEARCH. Performs VSEARCH global alignment between query and reference_reads, then assigns consensus taxonomy to each query sequence from among maxaccepts top hits, min_consensus of which share that taxonomic assignment. Unlike classify-consensus-blast, this method searches the entire reference database before choosing the top N hits, not the first N hits.


|  

</help>
    <citations>
        <citation type="doi">10.7717/peerj.2584</citation>
        <citation type="doi">10.1186/s40168-018-0470-z</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
