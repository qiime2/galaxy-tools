<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2024, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2024.10.0)
for:
    qiime2 (version: 2024.10.1)
-->
<tool name="qiime2 rescript get-bv-brc-genome-features" id="qiime2__rescript__get_bv_brc_genome_features" version="2024.10.0+q2galaxy.2024.10.0" profile="22.05" license="BSD-3-Clause">
    <description>Fetch genome features from BV-BRC.</description>
    <xrefs>
        <xref type="bio.tools">qiime2</xref>
    </xrefs>
    <requirements>
        <container type="docker">quay.io/qiime2/amplicon:2024.10</container>
    </requirements>
    <version_command>q2galaxy version rescript</version_command>
    <command detect_errors="exit_code">q2galaxy run rescript get_bv_brc_genome_features '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="staging_path_and_source_path"/>
    </configfiles>
    <inputs>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <conditional name="ids_metadata">
                <param name="type" type="select" label="ids_metadata: MetadataColumn[Numeric | Categorical]" help="[optional]  A metadata column obtained with the action get-bv-brc-metadata that can be used as a query.">
                    <option value="none" selected="true">None (default)</option>
                    <option value="tsv">Metadata from TSV</option>
                    <option value="qza">Metadata from Artifact</option>
                </param>
                <when value="none"/>
                <when value="tsv">
                    <param name="source" type="data" format="tabular,qiime2.tabular" label="Metadata Source"/>
                    <param name="column" type="data_column" label="Column Name" data_ref="source" use_header_names="true">
                        <validator type="expression" message="The first column cannot be selected (they are IDs).">value != "1"</validator>
                    </param>
                </when>
                <when value="qza">
                    <param name="source" type="data" format="qza" label="Metadata Source"/>
                    <param name="column" type="text" label="Column Name">
                        <validator type="empty_field"/>
                    </param>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__rql_query__" label="rql_query: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="rql_query: Str" help="[optional]  Query in RQL format. To download all data for genome_ids &quot;224308.43&quot; and &quot;2030927.4755&quot;, the RQL query looks like this: &quot;in(genome_id,(224308.43,2030927.4755))&quot;. While &quot;in&quot; is an RQL operator, &quot;genome_id&quot; is a data field and &quot;224308.43,2030927.4755&quot; are the values. It is important to percent encode values if they contain illegal characters like spaces. The values &quot;Bacillus subtilis&quot; and &quot;Bacteroidales bacterium&quot; have to be provided with percent encoded quotes (%22) and spaces (%20) like this: &quot;in(species,(%22Bacillus%20subtilis%22,%22Bacteroidales%20bacterium%22))&quot;. Check https://www.bv-brc.org/api/doc/ for documentation on data types and corresponding data fields.">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="rql_query" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="rql_query" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__data_field__" label="data_field: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="data_field: Str" help="[optional]  Data field of the data type &quot;genome_feature&quot;. This parameter can only be used in conjunction with the &quot;ids&quot; parameter. Retrieves all data associated with the IDs/values specified in parameter &quot;ids&quot; in this data field. Check https://www.bv-brc.org/api/doc/genome_feature for allowed data fields.">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="data_field" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="data_field" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
            <repeat name="ids" help="[optional]  IDs/values of the corresponding data field. This parameter can only be used in conjunction with the &quot;data-field&quot; parameter. Retrieves all data associated with these IDs/values in the specified data field." title="ids: List[Str]">
                <param name="element" type="text" label="element: Str" help="[required]">
                    <sanitizer>
                        <valid initial="string.printable"/>
                    </sanitizer>
                    <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
                </param>
            </repeat>
            <repeat name="ranks" help="[optional]  List of taxonomic ranks for building a taxonomy [default: 'kingdom, phylum, class, order, family, genus, species']" title="ranks: List[Str % Choices('domain', 'superkingdom', 'kingdom', 'subkingdom', 'superphylum', 'phylum', 'subphylum', 'infraphylum', 'superclass', 'class', 'subclass', 'infraclass', 'cohort', 'superorder', 'order', 'suborder', 'infraorder', 'parvorder', 'superfamily', 'family', 'subfamily', 'tribe', 'subtribe', 'genus', 'subgenus', 'species group', 'species subgroup', 'species', 'subspecies', 'forma')]">
                <param name="element" type="select" label="element: Str % Choices('domain', 'superkingdom', 'kingdom', 'subkingdom', 'superphylum', 'phylum', 'subphylum', 'infraphylum', 'superclass', 'class', 'subclass', 'infraclass', 'cohort', 'superorder', 'order', 'suborder', 'infraorder', 'parvorder', 'superfamily', 'family', 'subfamily', 'tribe', 'subtribe', 'genus', 'subgenus', 'species group', 'species subgroup', 'species', 'subspecies', 'forma')">
                    <option value="__q2galaxy__::literal::None">Selection required</option>
                    <option value="domain">domain</option>
                    <option value="superkingdom">superkingdom</option>
                    <option value="kingdom">kingdom</option>
                    <option value="subkingdom">subkingdom</option>
                    <option value="superphylum">superphylum</option>
                    <option value="phylum">phylum</option>
                    <option value="subphylum">subphylum</option>
                    <option value="infraphylum">infraphylum</option>
                    <option value="superclass">superclass</option>
                    <option value="class">class</option>
                    <option value="subclass">subclass</option>
                    <option value="infraclass">infraclass</option>
                    <option value="cohort">cohort</option>
                    <option value="superorder">superorder</option>
                    <option value="order">order</option>
                    <option value="suborder">suborder</option>
                    <option value="infraorder">infraorder</option>
                    <option value="parvorder">parvorder</option>
                    <option value="superfamily">superfamily</option>
                    <option value="family">family</option>
                    <option value="subfamily">subfamily</option>
                    <option value="tribe">tribe</option>
                    <option value="subtribe">subtribe</option>
                    <option value="genus">genus</option>
                    <option value="subgenus">subgenus</option>
                    <option value="species group">species group</option>
                    <option value="species subgroup">species subgroup</option>
                    <option value="species">species</option>
                    <option value="subspecies">subspecies</option>
                    <option value="forma">forma</option>
                    <validator type="expression" message="Please verify this parameter.">value != '__q2galaxy__::literal::None'</validator>
                </param>
            </repeat>
            <param name="rank_propagation" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" checked="true" label="rank_propagation: Bool" help="[default: Yes]  If a rank has no taxonomy associated with it, the taxonomy from the upper-level rank of that lineage, will be propagated downward. For example, if we are missing the genus label for 'f__Pasteurellaceae; g__'then the 'f__' rank will be propagated to become: 'f__Pasteurellaceae; g__Pasteurellaceae'."/>
        </section>
    </inputs>
    <outputs>
        <data name="genes" format="qza" label="${tool.name} on ${on_string}: genes.qza" from_work_dir="genes.qza"/>
        <data name="proteins" format="qza" label="${tool.name} on ${on_string}: proteins.qza" from_work_dir="proteins.qza"/>
        <data name="taxonomy" format="qza" label="${tool.name} on ${on_string}: taxonomy.qza" from_work_dir="taxonomy.qza"/>
        <data name="loci" format="qza" label="${tool.name} on ${on_string}: loci.qza" from_work_dir="loci.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: rescript get-bv-brc-genome-features
============================================
Fetch genome features from BV-BRC.


Outputs:
--------
:genes.qza: Gene
:proteins.qza: proteins
:taxonomy.qza: Taxonomy data for all sequences.
:loci.qza: loci

|  

Description:
------------
Fetch DNA and protein sequences of genome features from BV-BRC. BV-BRC (Bacterial and Viral Bioinformatics Resource Center) is a database for bacterial and viral genomes, annotations, and metadata. There are three ways to query data: You can use an RQL query to refine your search and get targeted features. By providing IDs/values and a corresponding data field, you can retrieve all features associated with those specific values in that data field. And as a third option a metadata column can be provided, to use metadata obtained with the action get-bv-brc-metadata as a new query. Check https://www.bv-brc.org/api/doc/ for documentation.


|  

</help>
    <citations>
        <citation type="bibtex">@article{cite1,
 author = {Olson, Robert D and Assaf, Rida and Brettin, Thomas and Conrad, Neal and Cucinell, Clark and Davis, James J and Dempsey, Donald M and Dickerman, Allan and Dietrich, Emily M and Kenyon, Ronald W and others},
 journal = {Nucleic acids research},
 number = {D1},
 pages = {D678--D689},
 publisher = {Oxford University Press},
 title = {Introducing the bacterial and viral bioinformatics resource center (BV-BRC): a resource combining PATRIC, IRD and ViPR},
 volume = {51},
 year = {2023}
}
</citation>
        <citation type="doi">10.1371/journal.pcbi.1009581</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
