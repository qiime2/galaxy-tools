<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2022, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2022.2.0)
for:
    qiime2 (version: 2022.2.1)
-->
<tool name="qiime2 sample-classifier confusion-matrix" id="qiime2_sample-classifier_confusion-matrix" version="2022.2.0+q2galaxy.2022.2.0" profile="20.09" license="BSD-3-Clause">
    <description>Make a confusion matrix from sample classifier predictions.</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2022.2</container>
    </requirements>
    <version_command>q2galaxy version sample_classifier</version_command>
    <command detect_errors="aggressive">q2galaxy run sample_classifier confusion_matrix '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="predictions" type="data" format="qza" label="predictions: SampleData[ClassifierPredictions]" help="[required]  Predicted values to plot on x axis. Should be predictions of categorical data produced by a sample classifier.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="SampleData[ClassifierPredictions]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in {'SampleData[ClassifierPredictions]'}</validator>
        </param>
        <conditional name="truth">
            <param name="type" type="select" label="truth: MetadataColumn[Categorical]" help="[required]  Metadata column (true values) to plot on y axis.">
                <option value="tsv" selected="true">Metadata from TSV</option>
                <option value="qza">Metadata from Artifact</option>
            </param>
            <when value="tsv">
                <param name="source" type="data" format="tabular,qiime2.tabular" label="Metadata Source"/>
                <param name="column" type="data_column" label="Column Name" data_ref="source" use_header_names="true">
                    <validator type="expression" message="The first column cannot be selected (they are IDs).">value != "1"</validator>
                </param>
            </when>
            <when value="qza">
                <param name="source" type="data" format="qza" label="Metadata Source"/>
                <param name="column" type="text" label="Column Name">
                    <validator type="empty_field"/>
                </param>
            </when>
        </conditional>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="probabilities" type="data" format="qza" optional="true" label="probabilities: SampleData[Probabilities]" help="[optional]  Predicted class probabilities for each input sample.">
                <options options_filter_attribute="metadata.semantic_type">
                    <filter type="add_value" value="SampleData[Probabilities]"/>
                </options>
                <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in {'SampleData[Probabilities]'}</validator>
            </param>
            <param name="missing_samples" type="select" label="missing_samples: Str % Choices('error', 'ignore')" help="[default: 'error']  How to handle missing samples in metadata. &quot;error&quot; will fail if missing samples are detected. &quot;ignore&quot; will cause the feature table and metadata to be filtered, so that only samples found in both files are retained." display="radio">
                <option value="error" selected="true">error</option>
                <option value="ignore">ignore</option>
            </param>
            <conditional name="__q2galaxy__GUI__conditional__vmin__">
                <param name="__q2galaxy__GUI__select__" type="select" label="vmin: Float | Str % Choices('auto')" help="[default: 'auto']  The minimum value to use for anchoring the colormap. If &quot;auto&quot;, vmin is set to the minimum value in the data.">
                    <option value="auto" selected="true">auto (Str)</option>
                    <option value="__q2galaxy__::control::Float">Provide a value (Float)</option>
                </param>
                <when value="auto">
                    <param name="vmin" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Float">
                    <param name="vmin" type="float" value="" label="vmin: Float" help="[required]  The minimum value to use for anchoring the colormap. If &quot;auto&quot;, vmin is set to the minimum value in the data."/>
                </when>
            </conditional>
            <conditional name="__q2galaxy__GUI__conditional__vmax__">
                <param name="__q2galaxy__GUI__select__" type="select" label="vmax: Float | Str % Choices('auto')" help="[default: 'auto']  The maximum value to use for anchoring the colormap. If &quot;auto&quot;, vmax is set to the maximum value in the data.">
                    <option value="auto" selected="true">auto (Str)</option>
                    <option value="__q2galaxy__::control::Float">Provide a value (Float)</option>
                </param>
                <when value="auto">
                    <param name="vmax" type="hidden" value="auto"/>
                </when>
                <when value="__q2galaxy__::control::Float">
                    <param name="vmax" type="float" value="" label="vmax: Float" help="[required]  The maximum value to use for anchoring the colormap. If &quot;auto&quot;, vmax is set to the maximum value in the data."/>
                </when>
            </conditional>
            <param name="palette" type="select" label="palette: Str % Choices('YellowOrangeBrown', 'YellowOrangeRed', 'OrangeRed', 'PurpleRed', 'RedPurple', 'BluePurple', 'GreenBlue', 'PurpleBlue', 'YellowGreen', 'summer', 'copper', 'viridis', 'cividis', 'plasma', 'inferno', 'magma', 'sirocco', 'drifting', 'melancholy', 'enigma', 'eros', 'spectre', 'ambition', 'mysteriousstains', 'daydream', 'solano', 'navarro', 'dandelions', 'deepblue', 'verve', 'greyscale')" help="[default: 'sirocco']  The color palette to use for plotting.">
                <option value="YellowOrangeBrown">YellowOrangeBrown</option>
                <option value="YellowOrangeRed">YellowOrangeRed</option>
                <option value="OrangeRed">OrangeRed</option>
                <option value="PurpleRed">PurpleRed</option>
                <option value="RedPurple">RedPurple</option>
                <option value="BluePurple">BluePurple</option>
                <option value="GreenBlue">GreenBlue</option>
                <option value="PurpleBlue">PurpleBlue</option>
                <option value="YellowGreen">YellowGreen</option>
                <option value="summer">summer</option>
                <option value="copper">copper</option>
                <option value="viridis">viridis</option>
                <option value="cividis">cividis</option>
                <option value="plasma">plasma</option>
                <option value="inferno">inferno</option>
                <option value="magma">magma</option>
                <option value="sirocco" selected="true">sirocco</option>
                <option value="drifting">drifting</option>
                <option value="melancholy">melancholy</option>
                <option value="enigma">enigma</option>
                <option value="eros">eros</option>
                <option value="spectre">spectre</option>
                <option value="ambition">ambition</option>
                <option value="mysteriousstains">mysteriousstains</option>
                <option value="daydream">daydream</option>
                <option value="solano">solano</option>
                <option value="navarro">navarro</option>
                <option value="dandelions">dandelions</option>
                <option value="deepblue">deepblue</option>
                <option value="verve">verve</option>
                <option value="greyscale">greyscale</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="visualization" format="qzv" label="${tool.id} on ${on_string}: visualization.qzv" from_work_dir="visualization.qzv"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: sample-classifier confusion-matrix
===========================================
Make a confusion matrix from sample classifier predictions.


Outputs:
--------
:visualization.qzv: &lt;no description&gt;

|  

Description:
------------
Make a confusion matrix and calculate accuracy of predicted vs. true values for a set of samples classified using a sample classifier. If per-sample class probabilities are provided, will also generate Receiver Operating Characteristic curves and calculate area under the curve for each class.


|  

</help>
    <citations>
        <citation type="bibtex">@article{cite1,
 author = {Bokulich, Nicholas and Dillon, Matthew and Bolyen, Evan and Kaehler, Benjamin D and Huttley, Gavin A and Caporaso, J Gregory},
 doi = {10.21105/joss.00934},
 journal = {Journal of Open Source Software},
 number = {30},
 pages = {934},
 title = {q2-sample-classifier: machine-learning tools for microbiome classification and regression},
 volume = {3},
 year = {2018}
}

</citation>
        <citation type="bibtex">@article{cite2,
 author = {Pedregosa, Fabian and Varoquaux, Gaël and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, Édouard},
 journal = {Journal of machine learning research},
 number = {Oct},
 pages = {2825--2830},
 title = {Scikit-learn: Machine learning in Python},
 volume = {12},
 year = {2011}
}

</citation>
        <citation type="bibtex">@article{cite3,
 author = {Bolyen, Evan and Rideout, Jai Ram and Dillon, Matthew R. and Bokulich, Nicholas A. and Abnet, Christian C. and Al-Ghalith, Gabriel A. and Alexander, Harriet and Alm, Eric J. and Arumugam, Manimozhiyan and Asnicar, Francesco and Bai, Yang and Bisanz, Jordan E. and Bittinger, Kyle and Brejnrod, Asker and Brislawn, Colin J. and Brown, C. Titus and Callahan, Benjamin J. and Caraballo-Rodríguez, Andrés Mauricio and Chase, John and Cope, Emily K. and Da Silva, Ricardo and Diener, Christian and Dorrestein, Pieter C. and Douglas, Gavin M. and Durall, Daniel M. and Duvallet, Claire and Edwardson, Christian F. and Ernst, Madeleine and Estaki, Mehrbod and Fouquier, Jennifer and Gauglitz, Julia M. and Gibbons, Sean M. and Gibson, Deanna L. and Gonzalez, Antonio and Gorlick, Kestrel and Guo, Jiarong and Hillmann, Benjamin and Holmes, Susan and Holste, Hannes and Huttenhower, Curtis and Huttley, Gavin A. and Janssen, Stefan and Jarmusch, Alan K. and Jiang, Lingjing and Kaehler, Benjamin D. and Kang, Kyo Bin and Keefe, Christopher R. and Keim, Paul and Kelley, Scott T. and Knights, Dan and Koester, Irina and Kosciolek, Tomasz and Kreps, Jorden and Langille, Morgan G. I. and Lee, Joslynn and Ley, Ruth and Liu, Yong-Xin and Loftfield, Erikka and Lozupone, Catherine and Maher, Massoud and Marotz, Clarisse and Martin, Bryan D. and McDonald, Daniel and McIver, Lauren J. and Melnik, Alexey V. and Metcalf, Jessica L. and Morgan, Sydney C. and Morton, Jamie T. and Naimey, Ahmad Turan and Navas-Molina, Jose A. and Nothias, Louis Felix and Orchanian, Stephanie B. and Pearson, Talima and Peoples, Samuel L. and Petras, Daniel and Preuss, Mary Lai and Pruesse, Elmar and Rasmussen, Lasse Buur and Rivers, Adam and Robeson, Michael S. and Rosenthal, Patrick and Segata, Nicola and Shaffer, Michael and Shiffer, Arron and Sinha, Rashmi and Song, Se Jin and Spear, John R. and Swafford, Austin D. and Thompson, Luke R. and Torres, Pedro J. and Trinh, Pauline and Tripathi, Anupriya and Turnbaugh, Peter J. and Ul-Hasan, Sabah and van der Hooft, Justin J. J. and Vargas, Fernando and Vázquez-Baeza, Yoshiki and Vogtmann, Emily and von Hippel, Max and Walters, William and Wan, Yunhu and Wang, Mingxun and Warren, Jonathan and Weber, Kyle C. and Williamson, Charles H. D. and Willis, Amy D. and Xu, Zhenjiang Zech and Zaneveld, Jesse R. and Zhang, Yilong and Zhu, Qiyun and Knight, Rob and Caporaso, J. Gregory},
 doi = {10.1038/s41587-019-0209-9},
 issn = {1546-1696},
 journal = {Nature Biotechnology},
 number = {8},
 pages = {852-857},
 title = {Reproducible, interactive, scalable and extensible microbiome data science using QIIME 2},
 url = {https://doi.org/10.1038/s41587-019-0209-9},
 volume = {37},
 year = {2019}
}

</citation>
    </citations>
</tool>
