<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2022, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2022.8.1)
for:
    qiime2 (version: 2022.8.1)
-->
<tool name="qiime2 cutadapt trim-single" id="qiime2__cutadapt__trim_single" version="2022.8.0+q2galaxy.2022.8.1.2" profile="22.05" license="BSD-3-Clause">
    <description>Find and remove adapters in demultiplexed single-end sequences.</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2022.8</container>
    </requirements>
    <version_command>q2galaxy version cutadapt</version_command>
    <command detect_errors="aggressive">q2galaxy run cutadapt trim_single '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="demultiplexed_sequences" type="data" format="qza" label="demultiplexed_sequences: SampleData[SequencesWithQuality]" help="[required]  The single-end sequences to be trimmed.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="SampleData[SequencesWithQuality]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['SampleData[SequencesWithQuality]']</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="cores" type="integer" min="1" value="1" label="cores: Int % Range(1, None)" help="[default: 1]  Number of CPU cores to use."/>
            <repeat name="adapter" help="[optional]  Sequence of an adapter ligated to the 3' end. The adapter and any subsequent bases are trimmed. If a `$` is appended, the adapter is only found if it is at the end of the read. If your sequence of interest is &quot;framed&quot; by a 5' and a 3' adapter, use this parameter to define a &quot;linked&quot; primer - see https://cutadapt.readthedocs.io for complete details." title="adapter: List[Str]">
                <param name="element" type="text" label="element: Str" help="[required]">
                    <sanitizer>
                        <valid initial="string.printable"/>
                    </sanitizer>
                    <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
                </param>
            </repeat>
            <repeat name="front" help="[optional]  Sequence of an adapter ligated to the 5' end. The adapter and any preceding bases are trimmed. Partial matches at the 5' end are allowed. If a `^` character is prepended, the adapter is only found if it is at the beginning of the read." title="front: List[Str]">
                <param name="element" type="text" label="element: Str" help="[required]">
                    <sanitizer>
                        <valid initial="string.printable"/>
                    </sanitizer>
                    <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
                </param>
            </repeat>
            <repeat name="anywhere" help="[optional]  Sequence of an adapter that may be ligated to the 5' or 3' end. Both types of matches as described under `adapter` and `front` are allowed. If the first base of the read is part of the match, the behavior is as with `front`, otherwise as with `adapter`. This option is mostly for rescuing failed library preparations - do not use if you know which end your adapter was ligated to." title="anywhere: List[Str]">
                <param name="element" type="text" label="element: Str" help="[required]">
                    <sanitizer>
                        <valid initial="string.printable"/>
                    </sanitizer>
                    <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
                </param>
            </repeat>
            <param name="error_rate" type="float" min="0" max="1" value="0.1" label="error_rate: Float % Range(0, 1, inclusive_end=True)" help="[default: 0.1]  Maximum allowed error rate."/>
            <param name="indels" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" checked="true" label="indels: Bool" help="[default: Yes]  Allow insertions or deletions of bases when matching adapters."/>
            <param name="times" type="integer" min="1" value="1" label="times: Int % Range(1, None)" help="[default: 1]  Remove multiple occurrences of an adapter if it is repeated, up to `times` times."/>
            <param name="overlap" type="integer" min="1" value="3" label="overlap: Int % Range(1, None)" help="[default: 3]  Require at least `overlap` bases of overlap between read and adapter for an adapter to be found."/>
            <param name="match_read_wildcards" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="match_read_wildcards: Bool" help="[default: No]  Interpret IUPAC wildcards (e.g., N) in reads."/>
            <param name="match_adapter_wildcards" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" checked="true" label="match_adapter_wildcards: Bool" help="[default: Yes]  Interpret IUPAC wildcards (e.g., N) in adapters."/>
            <param name="minimum_length" type="integer" min="1" value="1" label="minimum_length: Int % Range(1, None)" help="[default: 1]  Discard reads shorter than specified value. Note, the cutadapt default of 0 has been overridden, because that value produces empty sequence records."/>
            <param name="discard_untrimmed" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="discard_untrimmed: Bool" help="[default: No]  Discard reads in which no adapter was found."/>
        </section>
    </inputs>
    <outputs>
        <data name="trimmed_sequences" format="qza" label="${tool.name} on ${on_string}: trimmed_sequences.qza" from_work_dir="trimmed_sequences.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: cutadapt trim-single
=============================
Find and remove adapters in demultiplexed single-end sequences.


Outputs:
--------
:trimmed_sequences.qza: The resulting trimmed sequences.

|  

Description:
------------
Search demultiplexed single-end sequences for adapters and remove them. The parameter descriptions in this method are adapted from the official cutadapt docs - please see those docs at https://cutadapt.readthedocs.io for complete details.


|  

</help>
    <citations>
        <citation type="doi">10.14806/ej.17.1.200</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
