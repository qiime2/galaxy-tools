<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2025, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2025.10.0)
for:
    qiime2 (version: 2025.10.0)
-->
<tool name="qiime2 fondue get-all" id="qiime2__fondue__get_all" version="2025.10.0+q2galaxy.2025.10.0" profile="22.05" license="BSD-3-Clause">
    <description>Fetch sequence-related metadata and sequences of all run, study, BioProject, experiment or sample IDs.</description>
    <xrefs>
        <xref type="bio.tools">qiime2</xref>
    </xrefs>
    <requirements>
        <container type="docker">quay.io/qiime2/amplicon:2025.10</container>
    </requirements>
    <version_command>q2galaxy version fondue</version_command>
    <command detect_errors="exit_code">q2galaxy run fondue get_all '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="staging_path_and_source_path"/>
    </configfiles>
    <inputs>
        <param name="accession_ids" type="data" format="qza" label="accession_ids: NCBIAccessionIDs | SRAMetadata | SRAFailedIDs" help="[required]  Artifact containing run, study, BioProject, experiment or sample IDs for which the metadata and/or sequences should be fetched. Associated DOI names can be providedin an optional column and are preserved in get-alland get-metadata actions.">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="NCBIAccessionIDs"/>
                <filter type="add_value" value="SRAMetadata"/>
                <filter type="add_value" value="SRAFailedIDs"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['NCBIAccessionIDs', 'SRAFailedIDs', 'SRAMetadata']</validator>
        </param>
        <param name="email" type="text" label="email: Str" help="[required]  Your e-mail address (required by NCBI).">
            <sanitizer>
                <valid initial="string.printable"/>
            </sanitizer>
            <validator type="expression" message="Please verify this parameter.">value is not None and len(value) &gt; 0</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="linked_doi" type="data" format="qza" optional="true" label="linked_doi: NCBIAccessionIDs" help="[optional]  Optional table containing linked DOI names that is only used if accession_ids does not contain any DOI names.">
                <options options_filter_attribute="metadata.semantic_type">
                    <filter type="add_value" value="NCBIAccessionIDs"/>
                </options>
                <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['NCBIAccessionIDs']</validator>
            </param>
            <param name="threads" type="integer" min="1" value="1" label="threads: Int % Range(1, None)" help="[default: 1]  Number of threads to be used for parallelization of the data download from NCBI. Not to be confused with the number of parsl workers which can be configured through the parsl configuration file."/>
            <param name="retries" type="integer" min="0" value="2" label="retries: Int % Range(0, None)" help="[default: 2]  Number of retries to fetch sequences."/>
            <param name="log_level" type="select" label="log_level: Str % Choices('DEBUG', 'INFO', 'WARNING', 'ERROR')" display="radio">
                <option value="DEBUG">DEBUG</option>
                <option value="INFO" selected="true">INFO</option>
                <option value="WARNING">WARNING</option>
                <option value="ERROR">ERROR</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="metadata" format="qza" label="${tool.name} on ${on_string}: metadata.qza" from_work_dir="metadata.qza"/>
        <data name="single_reads" format="qza" label="${tool.name} on ${on_string}: single_reads.qza" from_work_dir="single_reads.qza"/>
        <data name="paired_reads" format="qza" label="${tool.name} on ${on_string}: paired_reads.qza" from_work_dir="paired_reads.qza"/>
        <data name="failed_runs" format="qza" label="${tool.name} on ${on_string}: failed_runs.qza" from_work_dir="failed_runs.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: fondue get-all
=======================
Fetch sequence-related metadata and sequences of all run, study, BioProject, experiment or sample IDs.


Outputs:
--------
:metadata.qza: Table containing metadata for all the requested IDs.
:single_reads.qza: Artifact containing single-read fastq.gz files for all the requested IDs.
:paired_reads.qza: Artifact containing paired-end fastq.gz files for all the requested IDs.
:failed_runs.qza: List of all run IDs for which fetching sequences and/or metadata  failed, with their corresponding error messages.

|  

Description:
------------
Pipeline fetching all sequence-related metadata and raw sequences of provided run, study, BioProject, experiment or sample IDs.


|  

</help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btz385</citation>
        <citation type="bibtex">@misc{cite2,
 author = {SRA Toolkit Development Team},
 name = {SRA Toolkit},
 url = {https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software},
 version = {2.9.6}
}
</citation>
        <citation type="doi">10.1093/bioinformatics/btac639</citation>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
