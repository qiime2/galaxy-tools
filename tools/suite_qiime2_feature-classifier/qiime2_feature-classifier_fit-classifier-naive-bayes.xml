<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2022, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2022.2.0)
for:
    qiime2 (version: 2022.2.1)
-->
<tool name="qiime2 feature-classifier fit-classifier-naive-bayes" id="qiime2_feature-classifier_fit-classifier-naive-bayes" version="2022.2.0+q2galaxy.2022.2.0" profile="20.09" license="BSD-3-Clause">
    <description>Train the naive_bayes classifier</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2022.2</container>
    </requirements>
    <version_command>q2galaxy version feature_classifier</version_command>
    <command detect_errors="aggressive">q2galaxy run feature_classifier fit_classifier_naive_bayes '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="reference_reads" type="data" format="qza" label="reference_reads: FeatureData[Sequence]" help="[required]">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Sequence]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in {'FeatureData[Sequence]'}</validator>
        </param>
        <param name="reference_taxonomy" type="data" format="qza" label="reference_taxonomy: FeatureData[Taxonomy]" help="[required]">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="FeatureData[Taxonomy]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in {'FeatureData[Taxonomy]'}</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="class_weight" type="data" format="qza" optional="true" label="class_weight: FeatureTable[RelativeFrequency]" help="[optional]">
                <options options_filter_attribute="metadata.semantic_type">
                    <filter type="add_value" value="FeatureTable[RelativeFrequency]"/>
                </options>
                <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in {'FeatureTable[RelativeFrequency]'}</validator>
            </param>
            <param name="classify__alpha" type="float" value="0.001" label="classify__alpha: Float" help="[default: 0.001]"/>
            <param name="classify__chunk_size" type="integer" value="20000" label="classify__chunk_size: Int" help="[default: 20000]"/>
            <param name="classify__class_prior" type="text" value="null" label="classify__class_prior: Str" help="[default: 'null']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="classify__fit_prior" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="classify__fit_prior: Bool" help="[default: No]"/>
            <param name="feat_ext__alternate_sign" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="feat_ext__alternate_sign: Bool" help="[default: No]"/>
            <param name="feat_ext__analyzer" type="text" value="char_wb" label="feat_ext__analyzer: Str" help="[default: 'char_wb']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__binary" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="feat_ext__binary: Bool" help="[default: No]"/>
            <param name="feat_ext__decode_error" type="text" value="strict" label="feat_ext__decode_error: Str" help="[default: 'strict']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__encoding" type="text" value="utf-8" label="feat_ext__encoding: Str" help="[default: 'utf-8']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__input" type="text" value="content" label="feat_ext__input: Str" help="[default: 'content']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__lowercase" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" checked="true" label="feat_ext__lowercase: Bool" help="[default: Yes]"/>
            <param name="feat_ext__n_features" type="integer" value="8192" label="feat_ext__n_features: Int" help="[default: 8192]"/>
            <param name="feat_ext__ngram_range" type="text" value="[7, 7]" label="feat_ext__ngram_range: Str" help="[default: '[7, 7]']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__norm" type="text" value="l2" label="feat_ext__norm: Str" help="[default: 'l2']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__preprocessor" type="text" value="null" label="feat_ext__preprocessor: Str" help="[default: 'null']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__stop_words" type="text" value="null" label="feat_ext__stop_words: Str" help="[default: 'null']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__strip_accents" type="text" value="null" label="feat_ext__strip_accents: Str" help="[default: 'null']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__token_pattern" type="text" value="(?u)\b\w\w+\b" label="feat_ext__token_pattern: Str" help="[default: '(?u)\\b\\w\\w+\\b']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="feat_ext__tokenizer" type="text" value="null" label="feat_ext__tokenizer: Str" help="[default: 'null']">
                <sanitizer>
                    <valid initial="string.printable"/>
                </sanitizer>
            </param>
            <param name="verbose" type="boolean" truevalue="__q2galaxy__::literal::True" falsevalue="__q2galaxy__::literal::False" label="verbose: Bool" help="[default: No]"/>
        </section>
    </inputs>
    <outputs>
        <data name="classifier" format="qza" label="${tool.id} on ${on_string}: classifier.qza" from_work_dir="classifier.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: feature-classifier fit-classifier-naive-bayes
======================================================
Train the naive_bayes classifier


Outputs:
--------
:classifier.qza: &lt;no description&gt;

|  

Description:
------------
Create a scikit-learn naive_bayes classifier for reads


|  

</help>
    <citations>
        <citation type="bibtex">@article{cite1,
 author = {Pedregosa, Fabian and Varoquaux, Gaël and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, Édouard},
 journal = {Journal of machine learning research},
 number = {Oct},
 pages = {2825--2830},
 title = {Scikit-learn: Machine learning in Python},
 volume = {12},
 year = {2011}
}

</citation>
        <citation type="bibtex">@article{cite2,
 author = {Bokulich, Nicholas A. and Kaehler, Benjamin D. and Rideout, Jai Ram and Dillon, Matthew and Bolyen, Evan and Knight, Rob and Huttley, Gavin A. and Caporaso, J. Gregory},
 doi = {10.1186/s40168-018-0470-z},
 journal = {Microbiome},
 number = {1},
 pages = {90},
 title = {Optimizing taxonomic classification of marker-gene amplicon sequences with QIIME 2's q2-feature-classifier plugin},
 url = {https://doi.org/10.1186/s40168-018-0470-z},
 volume = {6},
 year = {2018}
}

</citation>
        <citation type="bibtex">@article{cite3,
 author = {Bolyen, Evan and Rideout, Jai Ram and Dillon, Matthew R. and Bokulich, Nicholas A. and Abnet, Christian C. and Al-Ghalith, Gabriel A. and Alexander, Harriet and Alm, Eric J. and Arumugam, Manimozhiyan and Asnicar, Francesco and Bai, Yang and Bisanz, Jordan E. and Bittinger, Kyle and Brejnrod, Asker and Brislawn, Colin J. and Brown, C. Titus and Callahan, Benjamin J. and Caraballo-Rodríguez, Andrés Mauricio and Chase, John and Cope, Emily K. and Da Silva, Ricardo and Diener, Christian and Dorrestein, Pieter C. and Douglas, Gavin M. and Durall, Daniel M. and Duvallet, Claire and Edwardson, Christian F. and Ernst, Madeleine and Estaki, Mehrbod and Fouquier, Jennifer and Gauglitz, Julia M. and Gibbons, Sean M. and Gibson, Deanna L. and Gonzalez, Antonio and Gorlick, Kestrel and Guo, Jiarong and Hillmann, Benjamin and Holmes, Susan and Holste, Hannes and Huttenhower, Curtis and Huttley, Gavin A. and Janssen, Stefan and Jarmusch, Alan K. and Jiang, Lingjing and Kaehler, Benjamin D. and Kang, Kyo Bin and Keefe, Christopher R. and Keim, Paul and Kelley, Scott T. and Knights, Dan and Koester, Irina and Kosciolek, Tomasz and Kreps, Jorden and Langille, Morgan G. I. and Lee, Joslynn and Ley, Ruth and Liu, Yong-Xin and Loftfield, Erikka and Lozupone, Catherine and Maher, Massoud and Marotz, Clarisse and Martin, Bryan D. and McDonald, Daniel and McIver, Lauren J. and Melnik, Alexey V. and Metcalf, Jessica L. and Morgan, Sydney C. and Morton, Jamie T. and Naimey, Ahmad Turan and Navas-Molina, Jose A. and Nothias, Louis Felix and Orchanian, Stephanie B. and Pearson, Talima and Peoples, Samuel L. and Petras, Daniel and Preuss, Mary Lai and Pruesse, Elmar and Rasmussen, Lasse Buur and Rivers, Adam and Robeson, Michael S. and Rosenthal, Patrick and Segata, Nicola and Shaffer, Michael and Shiffer, Arron and Sinha, Rashmi and Song, Se Jin and Spear, John R. and Swafford, Austin D. and Thompson, Luke R. and Torres, Pedro J. and Trinh, Pauline and Tripathi, Anupriya and Turnbaugh, Peter J. and Ul-Hasan, Sabah and van der Hooft, Justin J. J. and Vargas, Fernando and Vázquez-Baeza, Yoshiki and Vogtmann, Emily and von Hippel, Max and Walters, William and Wan, Yunhu and Wang, Mingxun and Warren, Jonathan and Weber, Kyle C. and Williamson, Charles H. D. and Willis, Amy D. and Xu, Zhenjiang Zech and Zaneveld, Jesse R. and Zhang, Yilong and Zhu, Qiyun and Knight, Rob and Caporaso, J. Gregory},
 doi = {10.1038/s41587-019-0209-9},
 issn = {1546-1696},
 journal = {Nature Biotechnology},
 number = {8},
 pages = {852-857},
 title = {Reproducible, interactive, scalable and extensible microbiome data science using QIIME 2},
 url = {https://doi.org/10.1038/s41587-019-0209-9},
 volume = {37},
 year = {2019}
}

</citation>
    </citations>
</tool>
