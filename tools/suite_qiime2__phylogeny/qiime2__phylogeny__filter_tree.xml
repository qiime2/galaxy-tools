<?xml version='1.0' encoding='utf-8'?>
<!--
Copyright (c) 2022, QIIME 2 development team.

Distributed under the terms of the Modified BSD License. (SPDX: BSD-3-Clause)
-->
<!--
This tool was automatically generated by:
    q2galaxy (version: 2022.8.1)
for:
    qiime2 (version: 2022.8.1)
-->
<tool name="qiime2 phylogeny filter-tree" id="qiime2__phylogeny__filter_tree" version="2022.8.0+q2galaxy.2022.8.1.2" profile="22.05" license="BSD-3-Clause">
    <description>Remove features from tree based on metadata</description>
    <requirements>
        <container type="docker">quay.io/qiime2/core:2022.8</container>
    </requirements>
    <version_command>q2galaxy version phylogeny</version_command>
    <command detect_errors="aggressive">q2galaxy run phylogeny filter_tree '$inputs'</command>
    <configfiles>
        <inputs name="inputs" data_style="paths"/>
    </configfiles>
    <inputs>
        <param name="tree" type="data" format="qza" label="tree: Phylogeny[Rooted¹ | Unrooted²]" help="[required]  Tree that should be filtered">
            <options options_filter_attribute="metadata.semantic_type">
                <filter type="add_value" value="Phylogeny[Unrooted]"/>
                <filter type="add_value" value="Phylogeny[Rooted]"/>
            </options>
            <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['Phylogeny[Rooted]', 'Phylogeny[Unrooted]']</validator>
        </param>
        <section name="__q2galaxy__GUI__section__extra_opts__" title="Click here for additional options">
            <param name="table" type="data" format="qza" optional="true" label="table: FeatureTable[Frequency | RelativeFrequency | PresenceAbsence | Composition]" help="[optional]  Feature table which contains the identifier that should be retained in the tree">
                <options options_filter_attribute="metadata.semantic_type">
                    <filter type="add_value" value="FeatureTable[Composition]"/>
                    <filter type="add_value" value="FeatureTable[PresenceAbsence]"/>
                    <filter type="add_value" value="FeatureTable[Frequency]"/>
                    <filter type="add_value" value="FeatureTable[RelativeFrequency]"/>
                </options>
                <validator type="expression" message="Incompatible type">hasattr(value.metadata, "semantic_type") and value.metadata.semantic_type in ['FeatureTable[Composition]', 'FeatureTable[Frequency]', 'FeatureTable[PresenceAbsence]', 'FeatureTable[RelativeFrequency]']</validator>
            </param>
            <repeat name="metadata" help="[optional]  Feature metadata to use with the 'where' statement or to select tips to be retained. Metadata objects could also include FeatureData[Sequence] data types, if, forinstance, you want to filter to match represenative sequencces." title="metadata: Metadata">
                <conditional name="__q2galaxy__GUI__conditional__metadata__">
                    <param name="type" type="select" label="metadata: Metadata">
                        <option value="tsv" selected="true">Metadata from TSV</option>
                        <option value="qza">Metadata from Artifact</option>
                    </param>
                    <when value="tsv">
                        <param name="source" type="data" format="tabular,qiime2.tabular" label="Metadata Source"/>
                    </when>
                    <when value="qza">
                        <param name="source" type="data" format="qza" label="Metadata Source"/>
                    </when>
                </conditional>
            </repeat>
            <conditional name="__q2galaxy__GUI__conditional__where__" label="where: Str">
                <param name="__q2galaxy__GUI__select__" type="select" label="where: Str" help="[optional]  SQLite WHERE clause specifying sample metadata criteria that must be met to be included in the filtered feature table. If not provided, all samples in `metadata` that are also in the feature table will be retained.">
                    <option value="__q2galaxy__::control::default" selected="true">None (Use default behavior)</option>
                    <option value="__q2galaxy__::control::provide">Provide a value</option>
                </param>
                <when value="__q2galaxy__::control::default">
                    <param name="where" type="hidden" value="__q2galaxy__::literal::None"/>
                </when>
                <when value="__q2galaxy__::control::provide">
                    <param name="where" type="text">
                        <sanitizer>
                            <valid initial="string.printable"/>
                        </sanitizer>
                    </param>
                </when>
            </conditional>
        </section>
    </inputs>
    <outputs>
        <data name="filtered_tree" format="qza" label="${tool.name} on ${on_string}: filtered_tree.qza" from_work_dir="filtered_tree.qza"/>
    </outputs>
    <tests/>
    <help>
QIIME 2: phylogeny filter-tree
==============================
Remove features from tree based on metadata


Outputs:
--------
:filtered_tree.qza: The resulting phylogenetic tree.

|  

Description:
------------
Remove tips from a tree if their identifiers based on a set of provided identifiers.


|  

</help>
    <citations>
        <citation type="doi">10.1038/s41587-019-0209-9</citation>
    </citations>
</tool>
